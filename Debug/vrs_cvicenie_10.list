
vrs_cvicenie_10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bf0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  08002d78  08002d78  00012d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ecc  08002ecc  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08002ecc  08002ecc  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ecc  08002ecc  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ecc  08002ecc  00012ecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ed0  08002ed0  00012ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08002ed4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          00000174  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001dc  200001dc  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007fce  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a6a  00000000  00000000  00028066  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000848  00000000  00000000  00029ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000780  00000000  00000000  0002a318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000172b3  00000000  00000000  0002aa98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000065c3  00000000  00000000  00041d4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00079e2a  00000000  00000000  0004830e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000c2138  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000226c  00000000  00000000  000c218c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002d60 	.word	0x08002d60

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	08002d60 	.word	0x08002d60

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80001ec:	b480      	push	{r7}
 80001ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__NVIC_GetPriorityGrouping+0x18>)
 80001f2:	68db      	ldr	r3, [r3, #12]
 80001f4:	0a1b      	lsrs	r3, r3, #8
 80001f6:	f003 0307 	and.w	r3, r3, #7
}
 80001fa:	4618      	mov	r0, r3
 80001fc:	46bd      	mov	sp, r7
 80001fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000202:	4770      	bx	lr
 8000204:	e000ed00 	.word	0xe000ed00

08000208 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000208:	b480      	push	{r7}
 800020a:	b083      	sub	sp, #12
 800020c:	af00      	add	r7, sp, #0
 800020e:	4603      	mov	r3, r0
 8000210:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000216:	2b00      	cmp	r3, #0
 8000218:	db0b      	blt.n	8000232 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800021a:	79fb      	ldrb	r3, [r7, #7]
 800021c:	f003 021f 	and.w	r2, r3, #31
 8000220:	4907      	ldr	r1, [pc, #28]	; (8000240 <__NVIC_EnableIRQ+0x38>)
 8000222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000226:	095b      	lsrs	r3, r3, #5
 8000228:	2001      	movs	r0, #1
 800022a:	fa00 f202 	lsl.w	r2, r0, r2
 800022e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000232:	bf00      	nop
 8000234:	370c      	adds	r7, #12
 8000236:	46bd      	mov	sp, r7
 8000238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop
 8000240:	e000e100 	.word	0xe000e100

08000244 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000244:	b480      	push	{r7}
 8000246:	b083      	sub	sp, #12
 8000248:	af00      	add	r7, sp, #0
 800024a:	4603      	mov	r3, r0
 800024c:	6039      	str	r1, [r7, #0]
 800024e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000254:	2b00      	cmp	r3, #0
 8000256:	db0a      	blt.n	800026e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000258:	683b      	ldr	r3, [r7, #0]
 800025a:	b2da      	uxtb	r2, r3
 800025c:	490c      	ldr	r1, [pc, #48]	; (8000290 <__NVIC_SetPriority+0x4c>)
 800025e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000262:	0112      	lsls	r2, r2, #4
 8000264:	b2d2      	uxtb	r2, r2
 8000266:	440b      	add	r3, r1
 8000268:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800026c:	e00a      	b.n	8000284 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800026e:	683b      	ldr	r3, [r7, #0]
 8000270:	b2da      	uxtb	r2, r3
 8000272:	4908      	ldr	r1, [pc, #32]	; (8000294 <__NVIC_SetPriority+0x50>)
 8000274:	79fb      	ldrb	r3, [r7, #7]
 8000276:	f003 030f 	and.w	r3, r3, #15
 800027a:	3b04      	subs	r3, #4
 800027c:	0112      	lsls	r2, r2, #4
 800027e:	b2d2      	uxtb	r2, r2
 8000280:	440b      	add	r3, r1
 8000282:	761a      	strb	r2, [r3, #24]
}
 8000284:	bf00      	nop
 8000286:	370c      	adds	r7, #12
 8000288:	46bd      	mov	sp, r7
 800028a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028e:	4770      	bx	lr
 8000290:	e000e100 	.word	0xe000e100
 8000294:	e000ed00 	.word	0xe000ed00

08000298 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000298:	b480      	push	{r7}
 800029a:	b089      	sub	sp, #36	; 0x24
 800029c:	af00      	add	r7, sp, #0
 800029e:	60f8      	str	r0, [r7, #12]
 80002a0:	60b9      	str	r1, [r7, #8]
 80002a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	f003 0307 	and.w	r3, r3, #7
 80002aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002ac:	69fb      	ldr	r3, [r7, #28]
 80002ae:	f1c3 0307 	rsb	r3, r3, #7
 80002b2:	2b04      	cmp	r3, #4
 80002b4:	bf28      	it	cs
 80002b6:	2304      	movcs	r3, #4
 80002b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002ba:	69fb      	ldr	r3, [r7, #28]
 80002bc:	3304      	adds	r3, #4
 80002be:	2b06      	cmp	r3, #6
 80002c0:	d902      	bls.n	80002c8 <NVIC_EncodePriority+0x30>
 80002c2:	69fb      	ldr	r3, [r7, #28]
 80002c4:	3b03      	subs	r3, #3
 80002c6:	e000      	b.n	80002ca <NVIC_EncodePriority+0x32>
 80002c8:	2300      	movs	r3, #0
 80002ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002cc:	f04f 32ff 	mov.w	r2, #4294967295
 80002d0:	69bb      	ldr	r3, [r7, #24]
 80002d2:	fa02 f303 	lsl.w	r3, r2, r3
 80002d6:	43da      	mvns	r2, r3
 80002d8:	68bb      	ldr	r3, [r7, #8]
 80002da:	401a      	ands	r2, r3
 80002dc:	697b      	ldr	r3, [r7, #20]
 80002de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002e0:	f04f 31ff 	mov.w	r1, #4294967295
 80002e4:	697b      	ldr	r3, [r7, #20]
 80002e6:	fa01 f303 	lsl.w	r3, r1, r3
 80002ea:	43d9      	mvns	r1, r3
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002f0:	4313      	orrs	r3, r2
         );
}
 80002f2:	4618      	mov	r0, r3
 80002f4:	3724      	adds	r7, #36	; 0x24
 80002f6:	46bd      	mov	sp, r7
 80002f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fc:	4770      	bx	lr
	...

08000300 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000300:	b480      	push	{r7}
 8000302:	b085      	sub	sp, #20
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000308:	4b08      	ldr	r3, [pc, #32]	; (800032c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800030a:	695a      	ldr	r2, [r3, #20]
 800030c:	4907      	ldr	r1, [pc, #28]	; (800032c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	4313      	orrs	r3, r2
 8000312:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000314:	4b05      	ldr	r3, [pc, #20]	; (800032c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000316:	695a      	ldr	r2, [r3, #20]
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	4013      	ands	r3, r2
 800031c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800031e:	68fb      	ldr	r3, [r7, #12]
}
 8000320:	bf00      	nop
 8000322:	3714      	adds	r7, #20
 8000324:	46bd      	mov	sp, r7
 8000326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032a:	4770      	bx	lr
 800032c:	40021000 	.word	0x40021000

08000330 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8000334:	2001      	movs	r0, #1
 8000336:	f7ff ffe3 	bl	8000300 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800033a:	f7ff ff57 	bl	80001ec <__NVIC_GetPriorityGrouping>
 800033e:	4603      	mov	r3, r0
 8000340:	2200      	movs	r2, #0
 8000342:	2100      	movs	r1, #0
 8000344:	4618      	mov	r0, r3
 8000346:	f7ff ffa7 	bl	8000298 <NVIC_EncodePriority>
 800034a:	4603      	mov	r3, r0
 800034c:	4619      	mov	r1, r3
 800034e:	2010      	movs	r0, #16
 8000350:	f7ff ff78 	bl	8000244 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000354:	2010      	movs	r0, #16
 8000356:	f7ff ff57 	bl	8000208 <__NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800035a:	f7ff ff47 	bl	80001ec <__NVIC_GetPriorityGrouping>
 800035e:	4603      	mov	r3, r0
 8000360:	2200      	movs	r2, #0
 8000362:	2100      	movs	r1, #0
 8000364:	4618      	mov	r0, r3
 8000366:	f7ff ff97 	bl	8000298 <NVIC_EncodePriority>
 800036a:	4603      	mov	r3, r0
 800036c:	4619      	mov	r1, r3
 800036e:	2011      	movs	r0, #17
 8000370:	f7ff ff68 	bl	8000244 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000374:	2011      	movs	r0, #17
 8000376:	f7ff ff47 	bl	8000208 <__NVIC_EnableIRQ>

}
 800037a:	bf00      	nop
 800037c:	bd80      	pop	{r7, pc}
	...

08000380 <LL_AHB1_GRP1_EnableClock>:
{
 8000380:	b480      	push	{r7}
 8000382:	b085      	sub	sp, #20
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000388:	4b08      	ldr	r3, [pc, #32]	; (80003ac <LL_AHB1_GRP1_EnableClock+0x2c>)
 800038a:	695a      	ldr	r2, [r3, #20]
 800038c:	4907      	ldr	r1, [pc, #28]	; (80003ac <LL_AHB1_GRP1_EnableClock+0x2c>)
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	4313      	orrs	r3, r2
 8000392:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000394:	4b05      	ldr	r3, [pc, #20]	; (80003ac <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000396:	695a      	ldr	r2, [r3, #20]
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	4013      	ands	r3, r2
 800039c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800039e:	68fb      	ldr	r3, [r7, #12]
}
 80003a0:	bf00      	nop
 80003a2:	3714      	adds	r7, #20
 80003a4:	46bd      	mov	sp, r7
 80003a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003aa:	4770      	bx	lr
 80003ac:	40021000 	.word	0x40021000

080003b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80003b4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80003b8:	f7ff ffe2 	bl	8000380 <LL_AHB1_GRP1_EnableClock>

}
 80003bc:	bf00      	nop
 80003be:	bd80      	pop	{r7, pc}

080003c0 <__NVIC_SetPriorityGrouping>:
{
 80003c0:	b480      	push	{r7}
 80003c2:	b085      	sub	sp, #20
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	f003 0307 	and.w	r3, r3, #7
 80003ce:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80003d0:	4b0c      	ldr	r3, [pc, #48]	; (8000404 <__NVIC_SetPriorityGrouping+0x44>)
 80003d2:	68db      	ldr	r3, [r3, #12]
 80003d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80003d6:	68ba      	ldr	r2, [r7, #8]
 80003d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80003dc:	4013      	ands	r3, r2
 80003de:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80003e4:	68bb      	ldr	r3, [r7, #8]
 80003e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80003e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80003ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80003f2:	4a04      	ldr	r2, [pc, #16]	; (8000404 <__NVIC_SetPriorityGrouping+0x44>)
 80003f4:	68bb      	ldr	r3, [r7, #8]
 80003f6:	60d3      	str	r3, [r2, #12]
}
 80003f8:	bf00      	nop
 80003fa:	3714      	adds	r7, #20
 80003fc:	46bd      	mov	sp, r7
 80003fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000402:	4770      	bx	lr
 8000404:	e000ed00 	.word	0xe000ed00

08000408 <__NVIC_GetPriorityGrouping>:
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800040c:	4b04      	ldr	r3, [pc, #16]	; (8000420 <__NVIC_GetPriorityGrouping+0x18>)
 800040e:	68db      	ldr	r3, [r3, #12]
 8000410:	0a1b      	lsrs	r3, r3, #8
 8000412:	f003 0307 	and.w	r3, r3, #7
}
 8000416:	4618      	mov	r0, r3
 8000418:	46bd      	mov	sp, r7
 800041a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041e:	4770      	bx	lr
 8000420:	e000ed00 	.word	0xe000ed00

08000424 <__NVIC_SetPriority>:
{
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
 800042a:	4603      	mov	r3, r0
 800042c:	6039      	str	r1, [r7, #0]
 800042e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000434:	2b00      	cmp	r3, #0
 8000436:	db0a      	blt.n	800044e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000438:	683b      	ldr	r3, [r7, #0]
 800043a:	b2da      	uxtb	r2, r3
 800043c:	490c      	ldr	r1, [pc, #48]	; (8000470 <__NVIC_SetPriority+0x4c>)
 800043e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000442:	0112      	lsls	r2, r2, #4
 8000444:	b2d2      	uxtb	r2, r2
 8000446:	440b      	add	r3, r1
 8000448:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800044c:	e00a      	b.n	8000464 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800044e:	683b      	ldr	r3, [r7, #0]
 8000450:	b2da      	uxtb	r2, r3
 8000452:	4908      	ldr	r1, [pc, #32]	; (8000474 <__NVIC_SetPriority+0x50>)
 8000454:	79fb      	ldrb	r3, [r7, #7]
 8000456:	f003 030f 	and.w	r3, r3, #15
 800045a:	3b04      	subs	r3, #4
 800045c:	0112      	lsls	r2, r2, #4
 800045e:	b2d2      	uxtb	r2, r2
 8000460:	440b      	add	r3, r1
 8000462:	761a      	strb	r2, [r3, #24]
}
 8000464:	bf00      	nop
 8000466:	370c      	adds	r7, #12
 8000468:	46bd      	mov	sp, r7
 800046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046e:	4770      	bx	lr
 8000470:	e000e100 	.word	0xe000e100
 8000474:	e000ed00 	.word	0xe000ed00

08000478 <NVIC_EncodePriority>:
{
 8000478:	b480      	push	{r7}
 800047a:	b089      	sub	sp, #36	; 0x24
 800047c:	af00      	add	r7, sp, #0
 800047e:	60f8      	str	r0, [r7, #12]
 8000480:	60b9      	str	r1, [r7, #8]
 8000482:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	f003 0307 	and.w	r3, r3, #7
 800048a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800048c:	69fb      	ldr	r3, [r7, #28]
 800048e:	f1c3 0307 	rsb	r3, r3, #7
 8000492:	2b04      	cmp	r3, #4
 8000494:	bf28      	it	cs
 8000496:	2304      	movcs	r3, #4
 8000498:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800049a:	69fb      	ldr	r3, [r7, #28]
 800049c:	3304      	adds	r3, #4
 800049e:	2b06      	cmp	r3, #6
 80004a0:	d902      	bls.n	80004a8 <NVIC_EncodePriority+0x30>
 80004a2:	69fb      	ldr	r3, [r7, #28]
 80004a4:	3b03      	subs	r3, #3
 80004a6:	e000      	b.n	80004aa <NVIC_EncodePriority+0x32>
 80004a8:	2300      	movs	r3, #0
 80004aa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004ac:	f04f 32ff 	mov.w	r2, #4294967295
 80004b0:	69bb      	ldr	r3, [r7, #24]
 80004b2:	fa02 f303 	lsl.w	r3, r2, r3
 80004b6:	43da      	mvns	r2, r3
 80004b8:	68bb      	ldr	r3, [r7, #8]
 80004ba:	401a      	ands	r2, r3
 80004bc:	697b      	ldr	r3, [r7, #20]
 80004be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80004c0:	f04f 31ff 	mov.w	r1, #4294967295
 80004c4:	697b      	ldr	r3, [r7, #20]
 80004c6:	fa01 f303 	lsl.w	r3, r1, r3
 80004ca:	43d9      	mvns	r1, r3
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004d0:	4313      	orrs	r3, r2
}
 80004d2:	4618      	mov	r0, r3
 80004d4:	3724      	adds	r7, #36	; 0x24
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr
	...

080004e0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80004e4:	4b05      	ldr	r3, [pc, #20]	; (80004fc <LL_RCC_HSI_Enable+0x1c>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a04      	ldr	r2, [pc, #16]	; (80004fc <LL_RCC_HSI_Enable+0x1c>)
 80004ea:	f043 0301 	orr.w	r3, r3, #1
 80004ee:	6013      	str	r3, [r2, #0]
}
 80004f0:	bf00      	nop
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	40021000 	.word	0x40021000

08000500 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000504:	4b06      	ldr	r3, [pc, #24]	; (8000520 <LL_RCC_HSI_IsReady+0x20>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	f003 0302 	and.w	r3, r3, #2
 800050c:	2b02      	cmp	r3, #2
 800050e:	bf0c      	ite	eq
 8000510:	2301      	moveq	r3, #1
 8000512:	2300      	movne	r3, #0
 8000514:	b2db      	uxtb	r3, r3
}
 8000516:	4618      	mov	r0, r3
 8000518:	46bd      	mov	sp, r7
 800051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051e:	4770      	bx	lr
 8000520:	40021000 	.word	0x40021000

08000524 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 800052c:	4b07      	ldr	r3, [pc, #28]	; (800054c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	00db      	lsls	r3, r3, #3
 8000538:	4904      	ldr	r1, [pc, #16]	; (800054c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800053a:	4313      	orrs	r3, r2
 800053c:	600b      	str	r3, [r1, #0]
}
 800053e:	bf00      	nop
 8000540:	370c      	adds	r7, #12
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	40021000 	.word	0x40021000

08000550 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000558:	4b06      	ldr	r3, [pc, #24]	; (8000574 <LL_RCC_SetSysClkSource+0x24>)
 800055a:	685b      	ldr	r3, [r3, #4]
 800055c:	f023 0203 	bic.w	r2, r3, #3
 8000560:	4904      	ldr	r1, [pc, #16]	; (8000574 <LL_RCC_SetSysClkSource+0x24>)
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4313      	orrs	r3, r2
 8000566:	604b      	str	r3, [r1, #4]
}
 8000568:	bf00      	nop
 800056a:	370c      	adds	r7, #12
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr
 8000574:	40021000 	.word	0x40021000

08000578 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800057c:	4b04      	ldr	r3, [pc, #16]	; (8000590 <LL_RCC_GetSysClkSource+0x18>)
 800057e:	685b      	ldr	r3, [r3, #4]
 8000580:	f003 030c 	and.w	r3, r3, #12
}
 8000584:	4618      	mov	r0, r3
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	40021000 	.word	0x40021000

08000594 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800059c:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <LL_RCC_SetAHBPrescaler+0x24>)
 800059e:	685b      	ldr	r3, [r3, #4]
 80005a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80005a4:	4904      	ldr	r1, [pc, #16]	; (80005b8 <LL_RCC_SetAHBPrescaler+0x24>)
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	4313      	orrs	r3, r2
 80005aa:	604b      	str	r3, [r1, #4]
}
 80005ac:	bf00      	nop
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr
 80005b8:	40021000 	.word	0x40021000

080005bc <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80005c4:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80005c6:	685b      	ldr	r3, [r3, #4]
 80005c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80005cc:	4904      	ldr	r1, [pc, #16]	; (80005e0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	4313      	orrs	r3, r2
 80005d2:	604b      	str	r3, [r1, #4]
}
 80005d4:	bf00      	nop
 80005d6:	370c      	adds	r7, #12
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr
 80005e0:	40021000 	.word	0x40021000

080005e4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80005ec:	4b06      	ldr	r3, [pc, #24]	; (8000608 <LL_RCC_SetAPB2Prescaler+0x24>)
 80005ee:	685b      	ldr	r3, [r3, #4]
 80005f0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80005f4:	4904      	ldr	r1, [pc, #16]	; (8000608 <LL_RCC_SetAPB2Prescaler+0x24>)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4313      	orrs	r3, r2
 80005fa:	604b      	str	r3, [r1, #4]
}
 80005fc:	bf00      	nop
 80005fe:	370c      	adds	r7, #12
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr
 8000608:	40021000 	.word	0x40021000

0800060c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800060c:	b480      	push	{r7}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000614:	4b08      	ldr	r3, [pc, #32]	; (8000638 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000616:	69da      	ldr	r2, [r3, #28]
 8000618:	4907      	ldr	r1, [pc, #28]	; (8000638 <LL_APB1_GRP1_EnableClock+0x2c>)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	4313      	orrs	r3, r2
 800061e:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000620:	4b05      	ldr	r3, [pc, #20]	; (8000638 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000622:	69da      	ldr	r2, [r3, #28]
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	4013      	ands	r3, r2
 8000628:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800062a:	68fb      	ldr	r3, [r7, #12]
}
 800062c:	bf00      	nop
 800062e:	3714      	adds	r7, #20
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr
 8000638:	40021000 	.word	0x40021000

0800063c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800063c:	b480      	push	{r7}
 800063e:	b085      	sub	sp, #20
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000644:	4b08      	ldr	r3, [pc, #32]	; (8000668 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000646:	699a      	ldr	r2, [r3, #24]
 8000648:	4907      	ldr	r1, [pc, #28]	; (8000668 <LL_APB2_GRP1_EnableClock+0x2c>)
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	4313      	orrs	r3, r2
 800064e:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000650:	4b05      	ldr	r3, [pc, #20]	; (8000668 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000652:	699a      	ldr	r2, [r3, #24]
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	4013      	ands	r3, r2
 8000658:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800065a:	68fb      	ldr	r3, [r7, #12]
}
 800065c:	bf00      	nop
 800065e:	3714      	adds	r7, #20
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	40021000 	.word	0x40021000

0800066c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000674:	4b06      	ldr	r3, [pc, #24]	; (8000690 <LL_FLASH_SetLatency+0x24>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f023 0207 	bic.w	r2, r3, #7
 800067c:	4904      	ldr	r1, [pc, #16]	; (8000690 <LL_FLASH_SetLatency+0x24>)
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	4313      	orrs	r3, r2
 8000682:	600b      	str	r3, [r1, #0]
}
 8000684:	bf00      	nop
 8000686:	370c      	adds	r7, #12
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr
 8000690:	40022000 	.word	0x40022000

08000694 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000698:	4b04      	ldr	r3, [pc, #16]	; (80006ac <LL_FLASH_GetLatency+0x18>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f003 0307 	and.w	r3, r3, #7
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	40022000 	.word	0x40022000

080006b0 <setDutyCycle>:
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void proccesDmaData(uint8_t sign);

void setDutyCycle(uint8_t D)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	71fb      	strb	r3, [r7, #7]
	TIM2->CCR1 = D;
 80006ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	6353      	str	r3, [r2, #52]	; 0x34
}
 80006c2:	bf00      	nop
 80006c4:	370c      	adds	r7, #12
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
	...

080006d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  i = 0;
 80006d4:	4b1b      	ldr	r3, [pc, #108]	; (8000744 <main+0x74>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
  dutyCycleOld = 0;
 80006da:	4b1b      	ldr	r3, [pc, #108]	; (8000748 <main+0x78>)
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
  dutyCycle = 0;
 80006e0:	4b1a      	ldr	r3, [pc, #104]	; (800074c <main+0x7c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
  automatic = 0;
 80006e6:	4b1a      	ldr	r3, [pc, #104]	; (8000750 <main+0x80>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
  manual = 0;
 80006ec:	4b19      	ldr	r3, [pc, #100]	; (8000754 <main+0x84>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
  countDown = 0;
 80006f2:	4b19      	ldr	r3, [pc, #100]	; (8000758 <main+0x88>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80006f8:	2001      	movs	r0, #1
 80006fa:	f7ff ff9f 	bl	800063c <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80006fe:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000702:	f7ff ff83 	bl	800060c <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000706:	2003      	movs	r0, #3
 8000708:	f7ff fe5a 	bl	80003c0 <__NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 800070c:	f7ff fe7c 	bl	8000408 <__NVIC_GetPriorityGrouping>
 8000710:	4603      	mov	r3, r0
 8000712:	2200      	movs	r2, #0
 8000714:	210f      	movs	r1, #15
 8000716:	4618      	mov	r0, r3
 8000718:	f7ff feae 	bl	8000478 <NVIC_EncodePriority>
 800071c:	4603      	mov	r3, r0
 800071e:	4619      	mov	r1, r3
 8000720:	f04f 30ff 	mov.w	r0, #4294967295
 8000724:	f7ff fe7e 	bl	8000424 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000728:	f000 f81a 	bl	8000760 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800072c:	f7ff fe40 	bl	80003b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000730:	f7ff fdfe 	bl	8000330 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000734:	f001 f8ac 	bl	8001890 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000738:	f000 fc5a 	bl	8000ff0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  USART2_RegisterCallback(proccesDmaData);
 800073c:	4807      	ldr	r0, [pc, #28]	; (800075c <main+0x8c>)
 800073e:	f001 f895 	bl	800186c <USART2_RegisterCallback>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000742:	e7fe      	b.n	8000742 <main+0x72>
 8000744:	20000094 	.word	0x20000094
 8000748:	20000098 	.word	0x20000098
 800074c:	20000090 	.word	0x20000090
 8000750:	200000a0 	.word	0x200000a0
 8000754:	200000a4 	.word	0x200000a4
 8000758:	2000009c 	.word	0x2000009c
 800075c:	080007c5 	.word	0x080007c5

08000760 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000764:	2000      	movs	r0, #0
 8000766:	f7ff ff81 	bl	800066c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 800076a:	bf00      	nop
 800076c:	f7ff ff92 	bl	8000694 <LL_FLASH_GetLatency>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d1fa      	bne.n	800076c <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 8000776:	f7ff feb3 	bl	80004e0 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 800077a:	bf00      	nop
 800077c:	f7ff fec0 	bl	8000500 <LL_RCC_HSI_IsReady>
 8000780:	4603      	mov	r3, r0
 8000782:	2b01      	cmp	r3, #1
 8000784:	d1fa      	bne.n	800077c <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8000786:	2010      	movs	r0, #16
 8000788:	f7ff fecc 	bl	8000524 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800078c:	2000      	movs	r0, #0
 800078e:	f7ff ff01 	bl	8000594 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000792:	2000      	movs	r0, #0
 8000794:	f7ff ff12 	bl	80005bc <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000798:	2000      	movs	r0, #0
 800079a:	f7ff ff23 	bl	80005e4 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 800079e:	2000      	movs	r0, #0
 80007a0:	f7ff fed6 	bl	8000550 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80007a4:	bf00      	nop
 80007a6:	f7ff fee7 	bl	8000578 <LL_RCC_GetSysClkSource>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d1fa      	bne.n	80007a6 <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 80007b0:	4803      	ldr	r0, [pc, #12]	; (80007c0 <SystemClock_Config+0x60>)
 80007b2:	f002 f9cd 	bl	8002b50 <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 80007b6:	4802      	ldr	r0, [pc, #8]	; (80007c0 <SystemClock_Config+0x60>)
 80007b8:	f002 f9fe 	bl	8002bb8 <LL_SetSystemCoreClock>
}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	007a1200 	.word	0x007a1200

080007c4 <proccesDmaData>:

/* USER CODE BEGIN 4 */
void proccesDmaData(uint8_t sign)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	71fb      	strb	r3, [r7, #7]
	/* Process received data */

	if(sign != 0)
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d019      	beq.n	8000808 <proccesDmaData+0x44>
	{
		if (sign == '\r')
 80007d4:	79fb      	ldrb	r3, [r7, #7]
 80007d6:	2b0d      	cmp	r3, #13
 80007d8:	d10c      	bne.n	80007f4 <proccesDmaData+0x30>
		{
			LL_mDelay(500);
 80007da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007de:	f002 f9c5 	bl	8002b6c <LL_mDelay>
			i =0;
 80007e2:	4b2f      	ldr	r3, [pc, #188]	; (80008a0 <proccesDmaData+0xdc>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
			memset(data, 0, sizeof data);
 80007e8:	2232      	movs	r2, #50	; 0x32
 80007ea:	2100      	movs	r1, #0
 80007ec:	482d      	ldr	r0, [pc, #180]	; (80008a4 <proccesDmaData+0xe0>)
 80007ee:	f002 fa21 	bl	8002c34 <memset>
 80007f2:	e007      	b.n	8000804 <proccesDmaData+0x40>
		}
		else
		{
			data[i++] = sign;
 80007f4:	4b2a      	ldr	r3, [pc, #168]	; (80008a0 <proccesDmaData+0xdc>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	1c5a      	adds	r2, r3, #1
 80007fa:	4929      	ldr	r1, [pc, #164]	; (80008a0 <proccesDmaData+0xdc>)
 80007fc:	600a      	str	r2, [r1, #0]
 80007fe:	4929      	ldr	r1, [pc, #164]	; (80008a4 <proccesDmaData+0xe0>)
 8000800:	79fa      	ldrb	r2, [r7, #7]
 8000802:	54ca      	strb	r2, [r1, r3]
		}

		sign = 0;
 8000804:	2300      	movs	r3, #0
 8000806:	71fb      	strb	r3, [r7, #7]
	}


	if(strcmp(data,"$auto$")==0)
 8000808:	4927      	ldr	r1, [pc, #156]	; (80008a8 <proccesDmaData+0xe4>)
 800080a:	4826      	ldr	r0, [pc, #152]	; (80008a4 <proccesDmaData+0xe0>)
 800080c:	f7ff fcdc 	bl	80001c8 <strcmp>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d108      	bne.n	8000828 <proccesDmaData+0x64>
	{
		manual = 0;
 8000816:	4b25      	ldr	r3, [pc, #148]	; (80008ac <proccesDmaData+0xe8>)
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
		automatic = 1;
 800081c:	4b24      	ldr	r3, [pc, #144]	; (80008b0 <proccesDmaData+0xec>)
 800081e:	2201      	movs	r2, #1
 8000820:	601a      	str	r2, [r3, #0]

		dutyCycle = 50;
 8000822:	4b24      	ldr	r3, [pc, #144]	; (80008b4 <proccesDmaData+0xf0>)
 8000824:	2232      	movs	r2, #50	; 0x32
 8000826:	601a      	str	r2, [r3, #0]
	}

	if(strcmp(data,"$manual$")==0)
 8000828:	4923      	ldr	r1, [pc, #140]	; (80008b8 <proccesDmaData+0xf4>)
 800082a:	481e      	ldr	r0, [pc, #120]	; (80008a4 <proccesDmaData+0xe0>)
 800082c:	f7ff fccc 	bl	80001c8 <strcmp>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d105      	bne.n	8000842 <proccesDmaData+0x7e>
	{
		automatic = 0;
 8000836:	4b1e      	ldr	r3, [pc, #120]	; (80008b0 <proccesDmaData+0xec>)
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
		manual = 1;
 800083c:	4b1b      	ldr	r3, [pc, #108]	; (80008ac <proccesDmaData+0xe8>)
 800083e:	2201      	movs	r2, #1
 8000840:	601a      	str	r2, [r3, #0]
	}

	if((data[0] == '$') && (data[1] == 'P') && (data[2] == 'W') && (data[3] == 'M') && (data[strlen(data)-1] == '$') && (manual == 1) && (i<8))
 8000842:	4b18      	ldr	r3, [pc, #96]	; (80008a4 <proccesDmaData+0xe0>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	2b24      	cmp	r3, #36	; 0x24
 8000848:	d126      	bne.n	8000898 <proccesDmaData+0xd4>
 800084a:	4b16      	ldr	r3, [pc, #88]	; (80008a4 <proccesDmaData+0xe0>)
 800084c:	785b      	ldrb	r3, [r3, #1]
 800084e:	2b50      	cmp	r3, #80	; 0x50
 8000850:	d122      	bne.n	8000898 <proccesDmaData+0xd4>
 8000852:	4b14      	ldr	r3, [pc, #80]	; (80008a4 <proccesDmaData+0xe0>)
 8000854:	789b      	ldrb	r3, [r3, #2]
 8000856:	2b57      	cmp	r3, #87	; 0x57
 8000858:	d11e      	bne.n	8000898 <proccesDmaData+0xd4>
 800085a:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <proccesDmaData+0xe0>)
 800085c:	78db      	ldrb	r3, [r3, #3]
 800085e:	2b4d      	cmp	r3, #77	; 0x4d
 8000860:	d11a      	bne.n	8000898 <proccesDmaData+0xd4>
 8000862:	4810      	ldr	r0, [pc, #64]	; (80008a4 <proccesDmaData+0xe0>)
 8000864:	f7ff fcba 	bl	80001dc <strlen>
 8000868:	4603      	mov	r3, r0
 800086a:	3b01      	subs	r3, #1
 800086c:	4a0d      	ldr	r2, [pc, #52]	; (80008a4 <proccesDmaData+0xe0>)
 800086e:	5cd3      	ldrb	r3, [r2, r3]
 8000870:	2b24      	cmp	r3, #36	; 0x24
 8000872:	d111      	bne.n	8000898 <proccesDmaData+0xd4>
 8000874:	4b0d      	ldr	r3, [pc, #52]	; (80008ac <proccesDmaData+0xe8>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2b01      	cmp	r3, #1
 800087a:	d10d      	bne.n	8000898 <proccesDmaData+0xd4>
 800087c:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <proccesDmaData+0xdc>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2b07      	cmp	r3, #7
 8000882:	dc09      	bgt.n	8000898 <proccesDmaData+0xd4>
	{
		a = atoi(&(data[4]));
 8000884:	480d      	ldr	r0, [pc, #52]	; (80008bc <proccesDmaData+0xf8>)
 8000886:	f002 f9a7 	bl	8002bd8 <atoi>
 800088a:	4603      	mov	r3, r0
 800088c:	4a0c      	ldr	r2, [pc, #48]	; (80008c0 <proccesDmaData+0xfc>)
 800088e:	6013      	str	r3, [r2, #0]
		dutyCycleOld = a;
 8000890:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <proccesDmaData+0xfc>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a0b      	ldr	r2, [pc, #44]	; (80008c4 <proccesDmaData+0x100>)
 8000896:	6013      	str	r3, [r2, #0]
	}

}
 8000898:	bf00      	nop
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20000094 	.word	0x20000094
 80008a4:	200000a8 	.word	0x200000a8
 80008a8:	08002d78 	.word	0x08002d78
 80008ac:	200000a4 	.word	0x200000a4
 80008b0:	200000a0 	.word	0x200000a0
 80008b4:	20000090 	.word	0x20000090
 80008b8:	08002d80 	.word	0x08002d80
 80008bc:	200000ac 	.word	0x200000ac
 80008c0:	20000084 	.word	0x20000084
 80008c4:	20000098 	.word	0x20000098

080008c8 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	3b01      	subs	r3, #1
 80008d6:	4a0b      	ldr	r2, [pc, #44]	; (8000904 <LL_DMA_DisableChannel+0x3c>)
 80008d8:	5cd3      	ldrb	r3, [r2, r3]
 80008da:	461a      	mov	r2, r3
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	4413      	add	r3, r2
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	683a      	ldr	r2, [r7, #0]
 80008e4:	3a01      	subs	r2, #1
 80008e6:	4907      	ldr	r1, [pc, #28]	; (8000904 <LL_DMA_DisableChannel+0x3c>)
 80008e8:	5c8a      	ldrb	r2, [r1, r2]
 80008ea:	4611      	mov	r1, r2
 80008ec:	687a      	ldr	r2, [r7, #4]
 80008ee:	440a      	add	r2, r1
 80008f0:	f023 0301 	bic.w	r3, r3, #1
 80008f4:	6013      	str	r3, [r2, #0]
}
 80008f6:	bf00      	nop
 80008f8:	370c      	adds	r7, #12
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	08002d8c 	.word	0x08002d8c

08000908 <LL_DMA_IsActiveFlag_TC6>:
  * @rmtoll ISR          TCIF6         LL_DMA_IsActiveFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6));
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000918:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800091c:	bf0c      	ite	eq
 800091e:	2301      	moveq	r3, #1
 8000920:	2300      	movne	r3, #0
 8000922:	b2db      	uxtb	r3, r3
}
 8000924:	4618      	mov	r0, r3
 8000926:	370c      	adds	r7, #12
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr

08000930 <LL_DMA_IsActiveFlag_TC7>:
  * @rmtoll ISR          TCIF7         LL_DMA_IsActiveFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7));
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000940:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000944:	bf0c      	ite	eq
 8000946:	2301      	moveq	r3, #1
 8000948:	2300      	movne	r3, #0
 800094a:	b2db      	uxtb	r3, r3
}
 800094c:	4618      	mov	r0, r3
 800094e:	370c      	adds	r7, #12
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr

08000958 <LL_DMA_IsActiveFlag_HT6>:
  * @rmtoll ISR          HTIF6         LL_DMA_IsActiveFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT6(DMA_TypeDef *DMAx)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF6) == (DMA_ISR_HTIF6));
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000968:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800096c:	bf0c      	ite	eq
 800096e:	2301      	moveq	r3, #1
 8000970:	2300      	movne	r3, #0
 8000972:	b2db      	uxtb	r3, r3
}
 8000974:	4618      	mov	r0, r3
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <LL_DMA_ClearFlag_TC6>:
  * @rmtoll IFCR         CTCIF6        LL_DMA_ClearFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF6);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800098e:	605a      	str	r2, [r3, #4]
}
 8000990:	bf00      	nop
 8000992:	370c      	adds	r7, #12
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <LL_DMA_ClearFlag_TC7>:
  * @rmtoll IFCR         CTCIF7        LL_DMA_ClearFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC7(DMA_TypeDef *DMAx)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80009aa:	605a      	str	r2, [r3, #4]
}
 80009ac:	bf00      	nop
 80009ae:	370c      	adds	r7, #12
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <LL_DMA_ClearFlag_HT6>:
  * @rmtoll IFCR         CHTIF6        LL_DMA_ClearFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT6(DMA_TypeDef *DMAx)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF6);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80009c6:	605a      	str	r2, [r3, #4]
}
 80009c8:	bf00      	nop
 80009ca:	370c      	adds	r7, #12
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr

080009d4 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	f06f 0201 	mvn.w	r2, #1
 80009e2:	611a      	str	r2, [r3, #16]
}
 80009e4:	bf00      	nop
 80009e6:	370c      	adds	r7, #12
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr

080009f0 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	691b      	ldr	r3, [r3, #16]
 80009fc:	f003 0301 	and.w	r3, r3, #1
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d101      	bne.n	8000a08 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8000a04:	2301      	movs	r3, #1
 8000a06:	e000      	b.n	8000a0a <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8000a08:	2300      	movs	r3, #0
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr

08000a16 <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(USART_TypeDef *USARTx)
{
 8000a16:	b480      	push	{r7}
 8000a18:	b083      	sub	sp, #12
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	69db      	ldr	r3, [r3, #28]
 8000a22:	f003 0310 	and.w	r3, r3, #16
 8000a26:	2b10      	cmp	r3, #16
 8000a28:	d101      	bne.n	8000a2e <LL_USART_IsActiveFlag_IDLE+0x18>
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	e000      	b.n	8000a30 <LL_USART_IsActiveFlag_IDLE+0x1a>
 8000a2e:	2300      	movs	r3, #0
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	69db      	ldr	r3, [r3, #28]
 8000a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a4c:	2b40      	cmp	r3, #64	; 0x40
 8000a4e:	d101      	bne.n	8000a54 <LL_USART_IsActiveFlag_TC+0x18>
 8000a50:	2301      	movs	r3, #1
 8000a52:	e000      	b.n	8000a56 <LL_USART_IsActiveFlag_TC+0x1a>
 8000a54:	2300      	movs	r3, #0
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr

08000a62 <LL_USART_ClearFlag_IDLE>:
  * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 8000a62:	b480      	push	{r7}
 8000a64:	b083      	sub	sp, #12
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2210      	movs	r2, #16
 8000a6e:	621a      	str	r2, [r3, #32]
}
 8000a70:	bf00      	nop
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <NMI_Handler+0x4>

08000a82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <HardFault_Handler+0x4>

08000a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <MemManage_Handler+0x4>

08000a8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a92:	e7fe      	b.n	8000a92 <BusFault_Handler+0x4>

08000a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <UsageFault_Handler+0x4>

08000a9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr

08000ab6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
	...

08000ad4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC6(DMA1) == SET)
 8000ad8:	480c      	ldr	r0, [pc, #48]	; (8000b0c <DMA1_Channel6_IRQHandler+0x38>)
 8000ada:	f7ff ff15 	bl	8000908 <LL_DMA_IsActiveFlag_TC6>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b01      	cmp	r3, #1
 8000ae2:	d105      	bne.n	8000af0 <DMA1_Channel6_IRQHandler+0x1c>
	{
		USART2_CheckDmaReception();
 8000ae4:	f000 ffc4 	bl	8001a70 <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_TC6(DMA1);
 8000ae8:	4808      	ldr	r0, [pc, #32]	; (8000b0c <DMA1_Channel6_IRQHandler+0x38>)
 8000aea:	f7ff ff49 	bl	8000980 <LL_DMA_ClearFlag_TC6>
  /* USER CODE END DMA1_Channel6_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000aee:	e00a      	b.n	8000b06 <DMA1_Channel6_IRQHandler+0x32>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
 8000af0:	4806      	ldr	r0, [pc, #24]	; (8000b0c <DMA1_Channel6_IRQHandler+0x38>)
 8000af2:	f7ff ff31 	bl	8000958 <LL_DMA_IsActiveFlag_HT6>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d104      	bne.n	8000b06 <DMA1_Channel6_IRQHandler+0x32>
		USART2_CheckDmaReception();
 8000afc:	f000 ffb8 	bl	8001a70 <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_HT6(DMA1);
 8000b00:	4802      	ldr	r0, [pc, #8]	; (8000b0c <DMA1_Channel6_IRQHandler+0x38>)
 8000b02:	f7ff ff59 	bl	80009b8 <LL_DMA_ClearFlag_HT6>
}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40020000 	.word	0x40020000

08000b10 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC7(DMA1) == SET)
 8000b14:	480a      	ldr	r0, [pc, #40]	; (8000b40 <DMA1_Channel7_IRQHandler+0x30>)
 8000b16:	f7ff ff0b 	bl	8000930 <LL_DMA_IsActiveFlag_TC7>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d10d      	bne.n	8000b3c <DMA1_Channel7_IRQHandler+0x2c>
	{
		LL_DMA_ClearFlag_TC7(DMA1);
 8000b20:	4807      	ldr	r0, [pc, #28]	; (8000b40 <DMA1_Channel7_IRQHandler+0x30>)
 8000b22:	f7ff ff3b 	bl	800099c <LL_DMA_ClearFlag_TC7>

		while(LL_USART_IsActiveFlag_TC(USART2) == RESET);
 8000b26:	bf00      	nop
 8000b28:	4806      	ldr	r0, [pc, #24]	; (8000b44 <DMA1_Channel7_IRQHandler+0x34>)
 8000b2a:	f7ff ff87 	bl	8000a3c <LL_USART_IsActiveFlag_TC>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d0f9      	beq.n	8000b28 <DMA1_Channel7_IRQHandler+0x18>
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_7);
 8000b34:	2107      	movs	r1, #7
 8000b36:	4802      	ldr	r0, [pc, #8]	; (8000b40 <DMA1_Channel7_IRQHandler+0x30>)
 8000b38:	f7ff fec6 	bl	80008c8 <LL_DMA_DisableChannel>
  /* USER CODE END DMA1_Channel7_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000b3c:	bf00      	nop
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40020000 	.word	0x40020000
 8000b44:	40004400 	.word	0x40004400

08000b48 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM2))
 8000b4c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000b50:	f7ff ff4e 	bl	80009f0 <LL_TIM_IsActiveFlag_UPDATE>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d056      	beq.n	8000c08 <TIM2_IRQHandler+0xc0>
	{
		if(automatic == 1)
 8000b5a:	4b2c      	ldr	r3, [pc, #176]	; (8000c0c <TIM2_IRQHandler+0xc4>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d12f      	bne.n	8000bc2 <TIM2_IRQHandler+0x7a>
		{
			if((dutyCycle >= 99) && (countDown == 0))
 8000b62:	4b2b      	ldr	r3, [pc, #172]	; (8000c10 <TIM2_IRQHandler+0xc8>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	2b62      	cmp	r3, #98	; 0x62
 8000b68:	dd0a      	ble.n	8000b80 <TIM2_IRQHandler+0x38>
 8000b6a:	4b2a      	ldr	r3, [pc, #168]	; (8000c14 <TIM2_IRQHandler+0xcc>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d106      	bne.n	8000b80 <TIM2_IRQHandler+0x38>
			{
				dutyCycle = 99;
 8000b72:	4b27      	ldr	r3, [pc, #156]	; (8000c10 <TIM2_IRQHandler+0xc8>)
 8000b74:	2263      	movs	r2, #99	; 0x63
 8000b76:	601a      	str	r2, [r3, #0]
				countDown = 1;
 8000b78:	4b26      	ldr	r3, [pc, #152]	; (8000c14 <TIM2_IRQHandler+0xcc>)
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	e008      	b.n	8000b92 <TIM2_IRQHandler+0x4a>
			}else if (countDown == 0)
 8000b80:	4b24      	ldr	r3, [pc, #144]	; (8000c14 <TIM2_IRQHandler+0xcc>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d104      	bne.n	8000b92 <TIM2_IRQHandler+0x4a>
			{
				dutyCycle++;
 8000b88:	4b21      	ldr	r3, [pc, #132]	; (8000c10 <TIM2_IRQHandler+0xc8>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	4a20      	ldr	r2, [pc, #128]	; (8000c10 <TIM2_IRQHandler+0xc8>)
 8000b90:	6013      	str	r3, [r2, #0]
			}

			if((dutyCycle >= 1) && (countDown == 1))
 8000b92:	4b1f      	ldr	r3, [pc, #124]	; (8000c10 <TIM2_IRQHandler+0xc8>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	dd09      	ble.n	8000bae <TIM2_IRQHandler+0x66>
 8000b9a:	4b1e      	ldr	r3, [pc, #120]	; (8000c14 <TIM2_IRQHandler+0xcc>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	d105      	bne.n	8000bae <TIM2_IRQHandler+0x66>
			{
				dutyCycle--;
 8000ba2:	4b1b      	ldr	r3, [pc, #108]	; (8000c10 <TIM2_IRQHandler+0xc8>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	3b01      	subs	r3, #1
 8000ba8:	4a19      	ldr	r2, [pc, #100]	; (8000c10 <TIM2_IRQHandler+0xc8>)
 8000baa:	6013      	str	r3, [r2, #0]
 8000bac:	e009      	b.n	8000bc2 <TIM2_IRQHandler+0x7a>
			}else if(dutyCycle < 1)
 8000bae:	4b18      	ldr	r3, [pc, #96]	; (8000c10 <TIM2_IRQHandler+0xc8>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	dc05      	bgt.n	8000bc2 <TIM2_IRQHandler+0x7a>
			{
				dutyCycle = 1;
 8000bb6:	4b16      	ldr	r3, [pc, #88]	; (8000c10 <TIM2_IRQHandler+0xc8>)
 8000bb8:	2201      	movs	r2, #1
 8000bba:	601a      	str	r2, [r3, #0]
				countDown = 0;
 8000bbc:	4b15      	ldr	r3, [pc, #84]	; (8000c14 <TIM2_IRQHandler+0xcc>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
			}
		}

		if(manual == 1)
 8000bc2:	4b15      	ldr	r3, [pc, #84]	; (8000c18 <TIM2_IRQHandler+0xd0>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d115      	bne.n	8000bf6 <TIM2_IRQHandler+0xae>
		{
			if(dutyCycleOld < dutyCycle)
 8000bca:	4b14      	ldr	r3, [pc, #80]	; (8000c1c <TIM2_IRQHandler+0xd4>)
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <TIM2_IRQHandler+0xc8>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	429a      	cmp	r2, r3
 8000bd4:	da04      	bge.n	8000be0 <TIM2_IRQHandler+0x98>
			{
				dutyCycle--;
 8000bd6:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <TIM2_IRQHandler+0xc8>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	3b01      	subs	r3, #1
 8000bdc:	4a0c      	ldr	r2, [pc, #48]	; (8000c10 <TIM2_IRQHandler+0xc8>)
 8000bde:	6013      	str	r3, [r2, #0]
			}

			if(dutyCycleOld > dutyCycle)
 8000be0:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <TIM2_IRQHandler+0xd4>)
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <TIM2_IRQHandler+0xc8>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	dd04      	ble.n	8000bf6 <TIM2_IRQHandler+0xae>
			{
				dutyCycle++;
 8000bec:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <TIM2_IRQHandler+0xc8>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	4a07      	ldr	r2, [pc, #28]	; (8000c10 <TIM2_IRQHandler+0xc8>)
 8000bf4:	6013      	str	r3, [r2, #0]
			}

		}

		setDutyCycle(dutyCycle);
 8000bf6:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <TIM2_IRQHandler+0xc8>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff fd58 	bl	80006b0 <setDutyCycle>
		LL_TIM_ClearFlag_UPDATE(TIM2);
 8000c00:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c04:	f7ff fee6 	bl	80009d4 <LL_TIM_ClearFlag_UPDATE>
	}
  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c08:	bf00      	nop
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	200000a0 	.word	0x200000a0
 8000c10:	20000090 	.word	0x20000090
 8000c14:	2000009c 	.word	0x2000009c
 8000c18:	200000a4 	.word	0x200000a4
 8000c1c:	20000098 	.word	0x20000098

08000c20 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	if(LL_USART_IsActiveFlag_IDLE(USART2))
 8000c24:	4806      	ldr	r0, [pc, #24]	; (8000c40 <USART2_IRQHandler+0x20>)
 8000c26:	f7ff fef6 	bl	8000a16 <LL_USART_IsActiveFlag_IDLE>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d004      	beq.n	8000c3a <USART2_IRQHandler+0x1a>
	{
			USART2_CheckDmaReception();
 8000c30:	f000 ff1e 	bl	8001a70 <USART2_CheckDmaReception>
			LL_USART_ClearFlag_IDLE(USART2);
 8000c34:	4802      	ldr	r0, [pc, #8]	; (8000c40 <USART2_IRQHandler+0x20>)
 8000c36:	f7ff ff14 	bl	8000a62 <LL_USART_ClearFlag_IDLE>
	}
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40004400 	.word	0x40004400

08000c44 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c48:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <SystemInit+0x20>)
 8000c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c4e:	4a05      	ldr	r2, [pc, #20]	; (8000c64 <SystemInit+0x20>)
 8000c50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <__NVIC_GetPriorityGrouping>:
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c6c:	4b04      	ldr	r3, [pc, #16]	; (8000c80 <__NVIC_GetPriorityGrouping+0x18>)
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	0a1b      	lsrs	r3, r3, #8
 8000c72:	f003 0307 	and.w	r3, r3, #7
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <__NVIC_EnableIRQ>:
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	db0b      	blt.n	8000cae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	f003 021f 	and.w	r2, r3, #31
 8000c9c:	4907      	ldr	r1, [pc, #28]	; (8000cbc <__NVIC_EnableIRQ+0x38>)
 8000c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca2:	095b      	lsrs	r3, r3, #5
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	fa00 f202 	lsl.w	r2, r0, r2
 8000caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000cae:	bf00      	nop
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	e000e100 	.word	0xe000e100

08000cc0 <__NVIC_SetPriority>:
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	6039      	str	r1, [r7, #0]
 8000cca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db0a      	blt.n	8000cea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	490c      	ldr	r1, [pc, #48]	; (8000d0c <__NVIC_SetPriority+0x4c>)
 8000cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cde:	0112      	lsls	r2, r2, #4
 8000ce0:	b2d2      	uxtb	r2, r2
 8000ce2:	440b      	add	r3, r1
 8000ce4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000ce8:	e00a      	b.n	8000d00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	b2da      	uxtb	r2, r3
 8000cee:	4908      	ldr	r1, [pc, #32]	; (8000d10 <__NVIC_SetPriority+0x50>)
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	f003 030f 	and.w	r3, r3, #15
 8000cf6:	3b04      	subs	r3, #4
 8000cf8:	0112      	lsls	r2, r2, #4
 8000cfa:	b2d2      	uxtb	r2, r2
 8000cfc:	440b      	add	r3, r1
 8000cfe:	761a      	strb	r2, [r3, #24]
}
 8000d00:	bf00      	nop
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	e000e100 	.word	0xe000e100
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <NVIC_EncodePriority>:
{
 8000d14:	b480      	push	{r7}
 8000d16:	b089      	sub	sp, #36	; 0x24
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	60f8      	str	r0, [r7, #12]
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	f003 0307 	and.w	r3, r3, #7
 8000d26:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d28:	69fb      	ldr	r3, [r7, #28]
 8000d2a:	f1c3 0307 	rsb	r3, r3, #7
 8000d2e:	2b04      	cmp	r3, #4
 8000d30:	bf28      	it	cs
 8000d32:	2304      	movcs	r3, #4
 8000d34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	3304      	adds	r3, #4
 8000d3a:	2b06      	cmp	r3, #6
 8000d3c:	d902      	bls.n	8000d44 <NVIC_EncodePriority+0x30>
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	3b03      	subs	r3, #3
 8000d42:	e000      	b.n	8000d46 <NVIC_EncodePriority+0x32>
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d48:	f04f 32ff 	mov.w	r2, #4294967295
 8000d4c:	69bb      	ldr	r3, [r7, #24]
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	43da      	mvns	r2, r3
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	401a      	ands	r2, r3
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	fa01 f303 	lsl.w	r3, r1, r3
 8000d66:	43d9      	mvns	r1, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d6c:	4313      	orrs	r3, r2
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3724      	adds	r7, #36	; 0x24
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
	...

08000d7c <LL_AHB1_GRP1_EnableClock>:
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000d84:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d86:	695a      	ldr	r2, [r3, #20]
 8000d88:	4907      	ldr	r1, [pc, #28]	; (8000da8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000d90:	4b05      	ldr	r3, [pc, #20]	; (8000da8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d92:	695a      	ldr	r2, [r3, #20]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	4013      	ands	r3, r2
 8000d98:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d9a:	68fb      	ldr	r3, [r7, #12]
}
 8000d9c:	bf00      	nop
 8000d9e:	3714      	adds	r7, #20
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	40021000 	.word	0x40021000

08000dac <LL_APB1_GRP1_EnableClock>:
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000db4:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000db6:	69da      	ldr	r2, [r3, #28]
 8000db8:	4907      	ldr	r1, [pc, #28]	; (8000dd8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000dc0:	4b05      	ldr	r3, [pc, #20]	; (8000dd8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000dc2:	69da      	ldr	r2, [r3, #28]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000dca:	68fb      	ldr	r3, [r7, #12]
}
 8000dcc:	bf00      	nop
 8000dce:	3714      	adds	r7, #20
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	40021000 	.word	0x40021000

08000ddc <LL_TIM_EnableCounter>:
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f043 0201 	orr.w	r2, r3, #1
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	601a      	str	r2, [r3, #0]
}
 8000df0:	bf00      	nop
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr

08000dfc <LL_TIM_DisableARRPreload>:
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	601a      	str	r2, [r3, #0]
}
 8000e10:	bf00      	nop
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <LL_TIM_OC_DisableFast>:
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d028      	beq.n	8000e7e <LL_TIM_OC_DisableFast+0x62>
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	2b04      	cmp	r3, #4
 8000e30:	d023      	beq.n	8000e7a <LL_TIM_OC_DisableFast+0x5e>
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	2b10      	cmp	r3, #16
 8000e36:	d01e      	beq.n	8000e76 <LL_TIM_OC_DisableFast+0x5a>
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	2b40      	cmp	r3, #64	; 0x40
 8000e3c:	d019      	beq.n	8000e72 <LL_TIM_OC_DisableFast+0x56>
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e44:	d013      	beq.n	8000e6e <LL_TIM_OC_DisableFast+0x52>
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e4c:	d00d      	beq.n	8000e6a <LL_TIM_OC_DisableFast+0x4e>
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e54:	d007      	beq.n	8000e66 <LL_TIM_OC_DisableFast+0x4a>
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e5c:	d101      	bne.n	8000e62 <LL_TIM_OC_DisableFast+0x46>
 8000e5e:	2307      	movs	r3, #7
 8000e60:	e00e      	b.n	8000e80 <LL_TIM_OC_DisableFast+0x64>
 8000e62:	2308      	movs	r3, #8
 8000e64:	e00c      	b.n	8000e80 <LL_TIM_OC_DisableFast+0x64>
 8000e66:	2306      	movs	r3, #6
 8000e68:	e00a      	b.n	8000e80 <LL_TIM_OC_DisableFast+0x64>
 8000e6a:	2305      	movs	r3, #5
 8000e6c:	e008      	b.n	8000e80 <LL_TIM_OC_DisableFast+0x64>
 8000e6e:	2304      	movs	r3, #4
 8000e70:	e006      	b.n	8000e80 <LL_TIM_OC_DisableFast+0x64>
 8000e72:	2303      	movs	r3, #3
 8000e74:	e004      	b.n	8000e80 <LL_TIM_OC_DisableFast+0x64>
 8000e76:	2302      	movs	r3, #2
 8000e78:	e002      	b.n	8000e80 <LL_TIM_OC_DisableFast+0x64>
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e000      	b.n	8000e80 <LL_TIM_OC_DisableFast+0x64>
 8000e7e:	2300      	movs	r3, #0
 8000e80:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	3318      	adds	r3, #24
 8000e86:	4619      	mov	r1, r3
 8000e88:	7bfb      	ldrb	r3, [r7, #15]
 8000e8a:	4a0b      	ldr	r2, [pc, #44]	; (8000eb8 <LL_TIM_OC_DisableFast+0x9c>)
 8000e8c:	5cd3      	ldrb	r3, [r2, r3]
 8000e8e:	440b      	add	r3, r1
 8000e90:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	7bfb      	ldrb	r3, [r7, #15]
 8000e98:	4908      	ldr	r1, [pc, #32]	; (8000ebc <LL_TIM_OC_DisableFast+0xa0>)
 8000e9a:	5ccb      	ldrb	r3, [r1, r3]
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	2304      	movs	r3, #4
 8000ea0:	408b      	lsls	r3, r1
 8000ea2:	43db      	mvns	r3, r3
 8000ea4:	401a      	ands	r2, r3
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	601a      	str	r2, [r3, #0]
}
 8000eaa:	bf00      	nop
 8000eac:	3714      	adds	r7, #20
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	08002dac 	.word	0x08002dac
 8000ebc:	08002db8 	.word	0x08002db8

08000ec0 <LL_TIM_OC_EnablePreload>:
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d028      	beq.n	8000f22 <LL_TIM_OC_EnablePreload+0x62>
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	2b04      	cmp	r3, #4
 8000ed4:	d023      	beq.n	8000f1e <LL_TIM_OC_EnablePreload+0x5e>
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	2b10      	cmp	r3, #16
 8000eda:	d01e      	beq.n	8000f1a <LL_TIM_OC_EnablePreload+0x5a>
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	2b40      	cmp	r3, #64	; 0x40
 8000ee0:	d019      	beq.n	8000f16 <LL_TIM_OC_EnablePreload+0x56>
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ee8:	d013      	beq.n	8000f12 <LL_TIM_OC_EnablePreload+0x52>
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ef0:	d00d      	beq.n	8000f0e <LL_TIM_OC_EnablePreload+0x4e>
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ef8:	d007      	beq.n	8000f0a <LL_TIM_OC_EnablePreload+0x4a>
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f00:	d101      	bne.n	8000f06 <LL_TIM_OC_EnablePreload+0x46>
 8000f02:	2307      	movs	r3, #7
 8000f04:	e00e      	b.n	8000f24 <LL_TIM_OC_EnablePreload+0x64>
 8000f06:	2308      	movs	r3, #8
 8000f08:	e00c      	b.n	8000f24 <LL_TIM_OC_EnablePreload+0x64>
 8000f0a:	2306      	movs	r3, #6
 8000f0c:	e00a      	b.n	8000f24 <LL_TIM_OC_EnablePreload+0x64>
 8000f0e:	2305      	movs	r3, #5
 8000f10:	e008      	b.n	8000f24 <LL_TIM_OC_EnablePreload+0x64>
 8000f12:	2304      	movs	r3, #4
 8000f14:	e006      	b.n	8000f24 <LL_TIM_OC_EnablePreload+0x64>
 8000f16:	2303      	movs	r3, #3
 8000f18:	e004      	b.n	8000f24 <LL_TIM_OC_EnablePreload+0x64>
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	e002      	b.n	8000f24 <LL_TIM_OC_EnablePreload+0x64>
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e000      	b.n	8000f24 <LL_TIM_OC_EnablePreload+0x64>
 8000f22:	2300      	movs	r3, #0
 8000f24:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	3318      	adds	r3, #24
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	7bfb      	ldrb	r3, [r7, #15]
 8000f2e:	4a0a      	ldr	r2, [pc, #40]	; (8000f58 <LL_TIM_OC_EnablePreload+0x98>)
 8000f30:	5cd3      	ldrb	r3, [r2, r3]
 8000f32:	440b      	add	r3, r1
 8000f34:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	7bfb      	ldrb	r3, [r7, #15]
 8000f3c:	4907      	ldr	r1, [pc, #28]	; (8000f5c <LL_TIM_OC_EnablePreload+0x9c>)
 8000f3e:	5ccb      	ldrb	r3, [r1, r3]
 8000f40:	4619      	mov	r1, r3
 8000f42:	2308      	movs	r3, #8
 8000f44:	408b      	lsls	r3, r1
 8000f46:	431a      	orrs	r2, r3
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	601a      	str	r2, [r3, #0]
}
 8000f4c:	bf00      	nop
 8000f4e:	3714      	adds	r7, #20
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	08002dac 	.word	0x08002dac
 8000f5c:	08002db8 	.word	0x08002db8

08000f60 <LL_TIM_SetClockSource>:
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8000f72:	f023 0307 	bic.w	r3, r3, #7
 8000f76:	683a      	ldr	r2, [r7, #0]
 8000f78:	431a      	orrs	r2, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	609a      	str	r2, [r3, #8]
}
 8000f7e:	bf00      	nop
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr

08000f8a <LL_TIM_SetTriggerOutput>:
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	b083      	sub	sp, #12
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
 8000f92:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	431a      	orrs	r2, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	605a      	str	r2, [r3, #4]
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <LL_TIM_DisableMasterSlaveMode>:
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
}
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	f043 0201 	orr.w	r2, r3, #1
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	60da      	str	r2, [r3, #12]
}
 8000fe4:	bf00      	nop
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b094      	sub	sp, #80	; 0x50
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000ff6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	605a      	str	r2, [r3, #4]
 8001000:	609a      	str	r2, [r3, #8]
 8001002:	60da      	str	r2, [r3, #12]
 8001004:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001006:	f107 031c 	add.w	r3, r7, #28
 800100a:	2220      	movs	r2, #32
 800100c:	2100      	movs	r1, #0
 800100e:	4618      	mov	r0, r3
 8001010:	f001 fe10 	bl	8002c34 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001014:	1d3b      	adds	r3, r7, #4
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	605a      	str	r2, [r3, #4]
 800101c:	609a      	str	r2, [r3, #8]
 800101e:	60da      	str	r2, [r3, #12]
 8001020:	611a      	str	r2, [r3, #16]
 8001022:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8001024:	2001      	movs	r0, #1
 8001026:	f7ff fec1 	bl	8000dac <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800102a:	f7ff fe1d 	bl	8000c68 <__NVIC_GetPriorityGrouping>
 800102e:	4603      	mov	r3, r0
 8001030:	2200      	movs	r2, #0
 8001032:	2100      	movs	r1, #0
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff fe6d 	bl	8000d14 <NVIC_EncodePriority>
 800103a:	4603      	mov	r3, r0
 800103c:	4619      	mov	r1, r3
 800103e:	201c      	movs	r0, #28
 8001040:	f7ff fe3e 	bl	8000cc0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8001044:	201c      	movs	r0, #28
 8001046:	f7ff fe1d 	bl	8000c84 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 127;
 800104a:	237f      	movs	r3, #127	; 0x7f
 800104c:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800104e:	2300      	movs	r3, #0
 8001050:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 625;
 8001052:	f240 2371 	movw	r3, #625	; 0x271
 8001056:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001058:	2300      	movs	r3, #0
 800105a:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 800105c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001060:	4619      	mov	r1, r3
 8001062:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001066:	f001 f913 	bl	8002290 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 800106a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800106e:	f7ff fec5 	bl	8000dfc <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001072:	2100      	movs	r1, #0
 8001074:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001078:	f7ff ff72 	bl	8000f60 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 800107c:	2101      	movs	r1, #1
 800107e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001082:	f7ff ff1d 	bl	8000ec0 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001086:	2360      	movs	r3, #96	; 0x60
 8001088:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800108a:	2300      	movs	r3, #0
 800108c:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800108e:	2300      	movs	r3, #0
 8001090:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8001092:	2300      	movs	r3, #0
 8001094:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001096:	2300      	movs	r3, #0
 8001098:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800109a:	f107 031c 	add.w	r3, r7, #28
 800109e:	461a      	mov	r2, r3
 80010a0:	2101      	movs	r1, #1
 80010a2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80010a6:	f001 f965 	bl	8002374 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 80010aa:	2101      	movs	r1, #1
 80010ac:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80010b0:	f7ff feb4 	bl	8000e1c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 80010b4:	2100      	movs	r1, #0
 80010b6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80010ba:	f7ff ff66 	bl	8000f8a <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 80010be:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80010c2:	f7ff ff75 	bl	8000fb0 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */
  LL_TIM_EnableCounter(TIM2);
 80010c6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80010ca:	f7ff fe87 	bl	8000ddc <LL_TIM_EnableCounter>
  TIM2->CCER |= 0x0000001;
 80010ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010d2:	6a1b      	ldr	r3, [r3, #32]
 80010d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	6213      	str	r3, [r2, #32]
  LL_TIM_EnableIT_UPDATE(TIM2);
 80010de:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80010e2:	f7ff ff75 	bl	8000fd0 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM2);
 80010e6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80010ea:	f7ff fe77 	bl	8000ddc <LL_TIM_EnableCounter>
  /* USER CODE END TIM2_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80010ee:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80010f2:	f7ff fe43 	bl	8000d7c <LL_AHB1_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 80010f6:	2320      	movs	r3, #32
 80010f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80010fa:	2302      	movs	r3, #2
 80010fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001106:	2300      	movs	r3, #0
 8001108:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 800110a:	2301      	movs	r3, #1
 800110c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110e:	1d3b      	adds	r3, r7, #4
 8001110:	4619      	mov	r1, r3
 8001112:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001116:	f000 fe13 	bl	8001d40 <LL_GPIO_Init>

}
 800111a:	bf00      	nop
 800111c:	3750      	adds	r7, #80	; 0x50
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <__NVIC_GetPriorityGrouping>:
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001128:	4b04      	ldr	r3, [pc, #16]	; (800113c <__NVIC_GetPriorityGrouping+0x18>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	0a1b      	lsrs	r3, r3, #8
 800112e:	f003 0307 	and.w	r3, r3, #7
}
 8001132:	4618      	mov	r0, r3
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <__NVIC_EnableIRQ>:
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800114a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114e:	2b00      	cmp	r3, #0
 8001150:	db0b      	blt.n	800116a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	f003 021f 	and.w	r2, r3, #31
 8001158:	4907      	ldr	r1, [pc, #28]	; (8001178 <__NVIC_EnableIRQ+0x38>)
 800115a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115e:	095b      	lsrs	r3, r3, #5
 8001160:	2001      	movs	r0, #1
 8001162:	fa00 f202 	lsl.w	r2, r0, r2
 8001166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800116a:	bf00      	nop
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	e000e100 	.word	0xe000e100

0800117c <__NVIC_SetPriority>:
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	6039      	str	r1, [r7, #0]
 8001186:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118c:	2b00      	cmp	r3, #0
 800118e:	db0a      	blt.n	80011a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	b2da      	uxtb	r2, r3
 8001194:	490c      	ldr	r1, [pc, #48]	; (80011c8 <__NVIC_SetPriority+0x4c>)
 8001196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119a:	0112      	lsls	r2, r2, #4
 800119c:	b2d2      	uxtb	r2, r2
 800119e:	440b      	add	r3, r1
 80011a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80011a4:	e00a      	b.n	80011bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	4908      	ldr	r1, [pc, #32]	; (80011cc <__NVIC_SetPriority+0x50>)
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	f003 030f 	and.w	r3, r3, #15
 80011b2:	3b04      	subs	r3, #4
 80011b4:	0112      	lsls	r2, r2, #4
 80011b6:	b2d2      	uxtb	r2, r2
 80011b8:	440b      	add	r3, r1
 80011ba:	761a      	strb	r2, [r3, #24]
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	e000e100 	.word	0xe000e100
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <NVIC_EncodePriority>:
{
 80011d0:	b480      	push	{r7}
 80011d2:	b089      	sub	sp, #36	; 0x24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f003 0307 	and.w	r3, r3, #7
 80011e2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	f1c3 0307 	rsb	r3, r3, #7
 80011ea:	2b04      	cmp	r3, #4
 80011ec:	bf28      	it	cs
 80011ee:	2304      	movcs	r3, #4
 80011f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	3304      	adds	r3, #4
 80011f6:	2b06      	cmp	r3, #6
 80011f8:	d902      	bls.n	8001200 <NVIC_EncodePriority+0x30>
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	3b03      	subs	r3, #3
 80011fe:	e000      	b.n	8001202 <NVIC_EncodePriority+0x32>
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001204:	f04f 32ff 	mov.w	r2, #4294967295
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	43da      	mvns	r2, r3
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	401a      	ands	r2, r3
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001218:	f04f 31ff 	mov.w	r1, #4294967295
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	fa01 f303 	lsl.w	r3, r1, r3
 8001222:	43d9      	mvns	r1, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001228:	4313      	orrs	r3, r2
}
 800122a:	4618      	mov	r0, r3
 800122c:	3724      	adds	r7, #36	; 0x24
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
	...

08001238 <LL_DMA_EnableChannel>:
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	3b01      	subs	r3, #1
 8001246:	4a0b      	ldr	r2, [pc, #44]	; (8001274 <LL_DMA_EnableChannel+0x3c>)
 8001248:	5cd3      	ldrb	r3, [r2, r3]
 800124a:	461a      	mov	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4413      	add	r3, r2
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	683a      	ldr	r2, [r7, #0]
 8001254:	3a01      	subs	r2, #1
 8001256:	4907      	ldr	r1, [pc, #28]	; (8001274 <LL_DMA_EnableChannel+0x3c>)
 8001258:	5c8a      	ldrb	r2, [r1, r2]
 800125a:	4611      	mov	r1, r2
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	440a      	add	r2, r1
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	6013      	str	r3, [r2, #0]
}
 8001266:	bf00      	nop
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	08002dc4 	.word	0x08002dc4

08001278 <LL_DMA_SetDataTransferDirection>:
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	3b01      	subs	r3, #1
 8001288:	4a0d      	ldr	r2, [pc, #52]	; (80012c0 <LL_DMA_SetDataTransferDirection+0x48>)
 800128a:	5cd3      	ldrb	r3, [r2, r3]
 800128c:	461a      	mov	r2, r3
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	4413      	add	r3, r2
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001298:	f023 0310 	bic.w	r3, r3, #16
 800129c:	68ba      	ldr	r2, [r7, #8]
 800129e:	3a01      	subs	r2, #1
 80012a0:	4907      	ldr	r1, [pc, #28]	; (80012c0 <LL_DMA_SetDataTransferDirection+0x48>)
 80012a2:	5c8a      	ldrb	r2, [r1, r2]
 80012a4:	4611      	mov	r1, r2
 80012a6:	68fa      	ldr	r2, [r7, #12]
 80012a8:	440a      	add	r2, r1
 80012aa:	4611      	mov	r1, r2
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	600b      	str	r3, [r1, #0]
}
 80012b2:	bf00      	nop
 80012b4:	3714      	adds	r7, #20
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	08002dc4 	.word	0x08002dc4

080012c4 <LL_DMA_GetDataTransferDirection>:
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	3b01      	subs	r3, #1
 80012d2:	4a07      	ldr	r2, [pc, #28]	; (80012f0 <LL_DMA_GetDataTransferDirection+0x2c>)
 80012d4:	5cd3      	ldrb	r3, [r2, r3]
 80012d6:	461a      	mov	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4413      	add	r3, r2
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	f244 0310 	movw	r3, #16400	; 0x4010
 80012e2:	4013      	ands	r3, r2
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	08002dc4 	.word	0x08002dc4

080012f4 <LL_DMA_SetMode>:
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	3b01      	subs	r3, #1
 8001304:	4a0c      	ldr	r2, [pc, #48]	; (8001338 <LL_DMA_SetMode+0x44>)
 8001306:	5cd3      	ldrb	r3, [r2, r3]
 8001308:	461a      	mov	r2, r3
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	4413      	add	r3, r2
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f023 0220 	bic.w	r2, r3, #32
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	3b01      	subs	r3, #1
 8001318:	4907      	ldr	r1, [pc, #28]	; (8001338 <LL_DMA_SetMode+0x44>)
 800131a:	5ccb      	ldrb	r3, [r1, r3]
 800131c:	4619      	mov	r1, r3
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	440b      	add	r3, r1
 8001322:	4619      	mov	r1, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4313      	orrs	r3, r2
 8001328:	600b      	str	r3, [r1, #0]
}
 800132a:	bf00      	nop
 800132c:	3714      	adds	r7, #20
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	08002dc4 	.word	0x08002dc4

0800133c <LL_DMA_SetPeriphIncMode>:
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	3b01      	subs	r3, #1
 800134c:	4a0c      	ldr	r2, [pc, #48]	; (8001380 <LL_DMA_SetPeriphIncMode+0x44>)
 800134e:	5cd3      	ldrb	r3, [r2, r3]
 8001350:	461a      	mov	r2, r3
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	4413      	add	r3, r2
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	3b01      	subs	r3, #1
 8001360:	4907      	ldr	r1, [pc, #28]	; (8001380 <LL_DMA_SetPeriphIncMode+0x44>)
 8001362:	5ccb      	ldrb	r3, [r1, r3]
 8001364:	4619      	mov	r1, r3
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	440b      	add	r3, r1
 800136a:	4619      	mov	r1, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	4313      	orrs	r3, r2
 8001370:	600b      	str	r3, [r1, #0]
}
 8001372:	bf00      	nop
 8001374:	3714      	adds	r7, #20
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	08002dc4 	.word	0x08002dc4

08001384 <LL_DMA_SetMemoryIncMode>:
{
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	3b01      	subs	r3, #1
 8001394:	4a0c      	ldr	r2, [pc, #48]	; (80013c8 <LL_DMA_SetMemoryIncMode+0x44>)
 8001396:	5cd3      	ldrb	r3, [r2, r3]
 8001398:	461a      	mov	r2, r3
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	4413      	add	r3, r2
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	3b01      	subs	r3, #1
 80013a8:	4907      	ldr	r1, [pc, #28]	; (80013c8 <LL_DMA_SetMemoryIncMode+0x44>)
 80013aa:	5ccb      	ldrb	r3, [r1, r3]
 80013ac:	4619      	mov	r1, r3
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	440b      	add	r3, r1
 80013b2:	4619      	mov	r1, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	600b      	str	r3, [r1, #0]
}
 80013ba:	bf00      	nop
 80013bc:	3714      	adds	r7, #20
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	08002dc4 	.word	0x08002dc4

080013cc <LL_DMA_SetPeriphSize>:
{
 80013cc:	b480      	push	{r7}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	3b01      	subs	r3, #1
 80013dc:	4a0c      	ldr	r2, [pc, #48]	; (8001410 <LL_DMA_SetPeriphSize+0x44>)
 80013de:	5cd3      	ldrb	r3, [r2, r3]
 80013e0:	461a      	mov	r2, r3
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	4413      	add	r3, r2
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	3b01      	subs	r3, #1
 80013f0:	4907      	ldr	r1, [pc, #28]	; (8001410 <LL_DMA_SetPeriphSize+0x44>)
 80013f2:	5ccb      	ldrb	r3, [r1, r3]
 80013f4:	4619      	mov	r1, r3
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	440b      	add	r3, r1
 80013fa:	4619      	mov	r1, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	4313      	orrs	r3, r2
 8001400:	600b      	str	r3, [r1, #0]
}
 8001402:	bf00      	nop
 8001404:	3714      	adds	r7, #20
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	08002dc4 	.word	0x08002dc4

08001414 <LL_DMA_SetMemorySize>:
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	3b01      	subs	r3, #1
 8001424:	4a0c      	ldr	r2, [pc, #48]	; (8001458 <LL_DMA_SetMemorySize+0x44>)
 8001426:	5cd3      	ldrb	r3, [r2, r3]
 8001428:	461a      	mov	r2, r3
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	4413      	add	r3, r2
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	3b01      	subs	r3, #1
 8001438:	4907      	ldr	r1, [pc, #28]	; (8001458 <LL_DMA_SetMemorySize+0x44>)
 800143a:	5ccb      	ldrb	r3, [r1, r3]
 800143c:	4619      	mov	r1, r3
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	440b      	add	r3, r1
 8001442:	4619      	mov	r1, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4313      	orrs	r3, r2
 8001448:	600b      	str	r3, [r1, #0]
}
 800144a:	bf00      	nop
 800144c:	3714      	adds	r7, #20
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	08002dc4 	.word	0x08002dc4

0800145c <LL_DMA_SetChannelPriorityLevel>:
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	3b01      	subs	r3, #1
 800146c:	4a0c      	ldr	r2, [pc, #48]	; (80014a0 <LL_DMA_SetChannelPriorityLevel+0x44>)
 800146e:	5cd3      	ldrb	r3, [r2, r3]
 8001470:	461a      	mov	r2, r3
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	4413      	add	r3, r2
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	3b01      	subs	r3, #1
 8001480:	4907      	ldr	r1, [pc, #28]	; (80014a0 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8001482:	5ccb      	ldrb	r3, [r1, r3]
 8001484:	4619      	mov	r1, r3
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	440b      	add	r3, r1
 800148a:	4619      	mov	r1, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4313      	orrs	r3, r2
 8001490:	600b      	str	r3, [r1, #0]
}
 8001492:	bf00      	nop
 8001494:	3714      	adds	r7, #20
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	08002dc4 	.word	0x08002dc4

080014a4 <LL_DMA_SetDataLength>:
{
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	3b01      	subs	r3, #1
 80014b4:	4a0c      	ldr	r2, [pc, #48]	; (80014e8 <LL_DMA_SetDataLength+0x44>)
 80014b6:	5cd3      	ldrb	r3, [r2, r3]
 80014b8:	461a      	mov	r2, r3
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	4413      	add	r3, r2
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	0c1b      	lsrs	r3, r3, #16
 80014c2:	041b      	lsls	r3, r3, #16
 80014c4:	68ba      	ldr	r2, [r7, #8]
 80014c6:	3a01      	subs	r2, #1
 80014c8:	4907      	ldr	r1, [pc, #28]	; (80014e8 <LL_DMA_SetDataLength+0x44>)
 80014ca:	5c8a      	ldrb	r2, [r1, r2]
 80014cc:	4611      	mov	r1, r2
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	440a      	add	r2, r1
 80014d2:	4611      	mov	r1, r2
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	604b      	str	r3, [r1, #4]
}
 80014da:	bf00      	nop
 80014dc:	3714      	adds	r7, #20
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	08002dc4 	.word	0x08002dc4

080014ec <LL_DMA_GetDataLength>:
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	3b01      	subs	r3, #1
 80014fa:	4a06      	ldr	r2, [pc, #24]	; (8001514 <LL_DMA_GetDataLength+0x28>)
 80014fc:	5cd3      	ldrb	r3, [r2, r3]
 80014fe:	461a      	mov	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	4413      	add	r3, r2
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	b29b      	uxth	r3, r3
}
 8001508:	4618      	mov	r0, r3
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	08002dc4 	.word	0x08002dc4

08001518 <LL_DMA_ConfigAddresses>:
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
 8001524:	603b      	str	r3, [r7, #0]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	2b10      	cmp	r3, #16
 800152a:	d114      	bne.n	8001556 <LL_DMA_ConfigAddresses+0x3e>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	3b01      	subs	r3, #1
 8001530:	4a16      	ldr	r2, [pc, #88]	; (800158c <LL_DMA_ConfigAddresses+0x74>)
 8001532:	5cd3      	ldrb	r3, [r2, r3]
 8001534:	461a      	mov	r2, r3
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	4413      	add	r3, r2
 800153a:	461a      	mov	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	3b01      	subs	r3, #1
 8001544:	4a11      	ldr	r2, [pc, #68]	; (800158c <LL_DMA_ConfigAddresses+0x74>)
 8001546:	5cd3      	ldrb	r3, [r2, r3]
 8001548:	461a      	mov	r2, r3
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	4413      	add	r3, r2
 800154e:	461a      	mov	r2, r3
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	6093      	str	r3, [r2, #8]
}
 8001554:	e013      	b.n	800157e <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	3b01      	subs	r3, #1
 800155a:	4a0c      	ldr	r2, [pc, #48]	; (800158c <LL_DMA_ConfigAddresses+0x74>)
 800155c:	5cd3      	ldrb	r3, [r2, r3]
 800155e:	461a      	mov	r2, r3
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	4413      	add	r3, r2
 8001564:	461a      	mov	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	3b01      	subs	r3, #1
 800156e:	4a07      	ldr	r2, [pc, #28]	; (800158c <LL_DMA_ConfigAddresses+0x74>)
 8001570:	5cd3      	ldrb	r3, [r2, r3]
 8001572:	461a      	mov	r2, r3
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	4413      	add	r3, r2
 8001578:	461a      	mov	r2, r3
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	60d3      	str	r3, [r2, #12]
}
 800157e:	bf00      	nop
 8001580:	3714      	adds	r7, #20
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	08002dc4 	.word	0x08002dc4

08001590 <LL_DMA_SetPeriphAddress>:
{
 8001590:	b480      	push	{r7}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	3b01      	subs	r3, #1
 80015a0:	4a06      	ldr	r2, [pc, #24]	; (80015bc <LL_DMA_SetPeriphAddress+0x2c>)
 80015a2:	5cd3      	ldrb	r3, [r2, r3]
 80015a4:	461a      	mov	r2, r3
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	4413      	add	r3, r2
 80015aa:	461a      	mov	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6093      	str	r3, [r2, #8]
}
 80015b0:	bf00      	nop
 80015b2:	3714      	adds	r7, #20
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	08002dc4 	.word	0x08002dc4

080015c0 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	3b01      	subs	r3, #1
 80015ce:	4a0b      	ldr	r2, [pc, #44]	; (80015fc <LL_DMA_EnableIT_TC+0x3c>)
 80015d0:	5cd3      	ldrb	r3, [r2, r3]
 80015d2:	461a      	mov	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4413      	add	r3, r2
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	683a      	ldr	r2, [r7, #0]
 80015dc:	3a01      	subs	r2, #1
 80015de:	4907      	ldr	r1, [pc, #28]	; (80015fc <LL_DMA_EnableIT_TC+0x3c>)
 80015e0:	5c8a      	ldrb	r2, [r1, r2]
 80015e2:	4611      	mov	r1, r2
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	440a      	add	r2, r1
 80015e8:	f043 0302 	orr.w	r3, r3, #2
 80015ec:	6013      	str	r3, [r2, #0]
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	08002dc4 	.word	0x08002dc4

08001600 <LL_DMA_EnableIT_HT>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_HTIE);
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	3b01      	subs	r3, #1
 800160e:	4a0b      	ldr	r2, [pc, #44]	; (800163c <LL_DMA_EnableIT_HT+0x3c>)
 8001610:	5cd3      	ldrb	r3, [r2, r3]
 8001612:	461a      	mov	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4413      	add	r3, r2
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	683a      	ldr	r2, [r7, #0]
 800161c:	3a01      	subs	r2, #1
 800161e:	4907      	ldr	r1, [pc, #28]	; (800163c <LL_DMA_EnableIT_HT+0x3c>)
 8001620:	5c8a      	ldrb	r2, [r1, r2]
 8001622:	4611      	mov	r1, r2
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	440a      	add	r2, r1
 8001628:	f043 0304 	orr.w	r3, r3, #4
 800162c:	6013      	str	r3, [r2, #0]
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	08002dc4 	.word	0x08002dc4

08001640 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	3b01      	subs	r3, #1
 800164e:	4a0b      	ldr	r2, [pc, #44]	; (800167c <LL_DMA_EnableIT_TE+0x3c>)
 8001650:	5cd3      	ldrb	r3, [r2, r3]
 8001652:	461a      	mov	r2, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	4413      	add	r3, r2
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	683a      	ldr	r2, [r7, #0]
 800165c:	3a01      	subs	r2, #1
 800165e:	4907      	ldr	r1, [pc, #28]	; (800167c <LL_DMA_EnableIT_TE+0x3c>)
 8001660:	5c8a      	ldrb	r2, [r1, r2]
 8001662:	4611      	mov	r1, r2
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	440a      	add	r2, r1
 8001668:	f043 0308 	orr.w	r3, r3, #8
 800166c:	6013      	str	r3, [r2, #0]
}
 800166e:	bf00      	nop
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	08002dc4 	.word	0x08002dc4

08001680 <LL_AHB1_GRP1_EnableClock>:
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001688:	4b08      	ldr	r3, [pc, #32]	; (80016ac <LL_AHB1_GRP1_EnableClock+0x2c>)
 800168a:	695a      	ldr	r2, [r3, #20]
 800168c:	4907      	ldr	r1, [pc, #28]	; (80016ac <LL_AHB1_GRP1_EnableClock+0x2c>)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4313      	orrs	r3, r2
 8001692:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001694:	4b05      	ldr	r3, [pc, #20]	; (80016ac <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001696:	695a      	ldr	r2, [r3, #20]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4013      	ands	r3, r2
 800169c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800169e:	68fb      	ldr	r3, [r7, #12]
}
 80016a0:	bf00      	nop
 80016a2:	3714      	adds	r7, #20
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	40021000 	.word	0x40021000

080016b0 <LL_APB1_GRP1_EnableClock>:
{
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80016b8:	4b08      	ldr	r3, [pc, #32]	; (80016dc <LL_APB1_GRP1_EnableClock+0x2c>)
 80016ba:	69da      	ldr	r2, [r3, #28]
 80016bc:	4907      	ldr	r1, [pc, #28]	; (80016dc <LL_APB1_GRP1_EnableClock+0x2c>)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80016c4:	4b05      	ldr	r3, [pc, #20]	; (80016dc <LL_APB1_GRP1_EnableClock+0x2c>)
 80016c6:	69da      	ldr	r2, [r3, #28]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4013      	ands	r3, r2
 80016cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016ce:	68fb      	ldr	r3, [r7, #12]
}
 80016d0:	bf00      	nop
 80016d2:	3714      	adds	r7, #20
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	40021000 	.word	0x40021000

080016e0 <LL_USART_Enable>:
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f043 0201 	orr.w	r2, r3, #1
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	601a      	str	r2, [r3, #0]
}
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <LL_USART_ConfigAsyncMode>:
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	609a      	str	r2, [r3, #8]
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 800172c:	b480      	push	{r7}
 800172e:	b089      	sub	sp, #36	; 0x24
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	e853 3f00 	ldrex	r3, [r3]
 800173e:	60bb      	str	r3, [r7, #8]
   return(result);
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	f043 0310 	orr.w	r3, r3, #16
 8001746:	61fb      	str	r3, [r7, #28]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	69fa      	ldr	r2, [r7, #28]
 800174c:	61ba      	str	r2, [r7, #24]
 800174e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001750:	6979      	ldr	r1, [r7, #20]
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	e841 2300 	strex	r3, r2, [r1]
 8001758:	613b      	str	r3, [r7, #16]
   return(result);
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d1e9      	bne.n	8001734 <LL_USART_EnableIT_IDLE+0x8>
}
 8001760:	bf00      	nop
 8001762:	bf00      	nop
 8001764:	3724      	adds	r7, #36	; 0x24
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr

0800176e <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 800176e:	b480      	push	{r7}
 8001770:	b089      	sub	sp, #36	; 0x24
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	3308      	adds	r3, #8
 800177a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	e853 3f00 	ldrex	r3, [r3]
 8001782:	60bb      	str	r3, [r7, #8]
   return(result);
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800178a:	61fb      	str	r3, [r7, #28]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3308      	adds	r3, #8
 8001790:	69fa      	ldr	r2, [r7, #28]
 8001792:	61ba      	str	r2, [r7, #24]
 8001794:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001796:	6979      	ldr	r1, [r7, #20]
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	e841 2300 	strex	r3, r2, [r1]
 800179e:	613b      	str	r3, [r7, #16]
   return(result);
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d1e7      	bne.n	8001776 <LL_USART_DisableIT_CTS+0x8>
}
 80017a6:	bf00      	nop
 80017a8:	bf00      	nop
 80017aa:	3724      	adds	r7, #36	; 0x24
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b089      	sub	sp, #36	; 0x24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	3308      	adds	r3, #8
 80017c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	e853 3f00 	ldrex	r3, [r3]
 80017c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017d0:	61fb      	str	r3, [r7, #28]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	3308      	adds	r3, #8
 80017d6:	69fa      	ldr	r2, [r7, #28]
 80017d8:	61ba      	str	r2, [r7, #24]
 80017da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80017dc:	6979      	ldr	r1, [r7, #20]
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	e841 2300 	strex	r3, r2, [r1]
 80017e4:	613b      	str	r3, [r7, #16]
   return(result);
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d1e7      	bne.n	80017bc <LL_USART_EnableDMAReq_RX+0x8>
}
 80017ec:	bf00      	nop
 80017ee:	bf00      	nop
 80017f0:	3724      	adds	r7, #36	; 0x24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr

080017fa <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 80017fa:	b480      	push	{r7}
 80017fc:	b089      	sub	sp, #36	; 0x24
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	3308      	adds	r3, #8
 8001806:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	e853 3f00 	ldrex	r3, [r3]
 800180e:	60bb      	str	r3, [r7, #8]
   return(result);
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001816:	61fb      	str	r3, [r7, #28]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	3308      	adds	r3, #8
 800181c:	69fa      	ldr	r2, [r7, #28]
 800181e:	61ba      	str	r2, [r7, #24]
 8001820:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001822:	6979      	ldr	r1, [r7, #20]
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	e841 2300 	strex	r3, r2, [r1]
 800182a:	613b      	str	r3, [r7, #16]
   return(result);
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1e7      	bne.n	8001802 <LL_USART_EnableDMAReq_TX+0x8>
}
 8001832:	bf00      	nop
 8001834:	bf00      	nop
 8001836:	3724      	adds	r7, #36	; 0x24
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx, uint32_t Direction)
{
 8001840:	b480      	push	{r7}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr;

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d103      	bne.n	8001858 <LL_USART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3328      	adds	r3, #40	; 0x28
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	e002      	b.n	800185e <LL_USART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	3324      	adds	r3, #36	; 0x24
 800185c:	60fb      	str	r3, [r7, #12]
  }

  return data_reg_addr;
 800185e:	68fb      	ldr	r3, [r7, #12]
}
 8001860:	4618      	mov	r0, r3
 8001862:	3714      	adds	r7, #20
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <USART2_RegisterCallback>:
static uint16_t old_pos = 0;

static void (* USART2_ProcessData)(uint8_t data) = 0;

void USART2_RegisterCallback(void *callback)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
	if(callback != 0)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d002      	beq.n	8001880 <USART2_RegisterCallback+0x14>
	{
		USART2_ProcessData = callback;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a03      	ldr	r2, [pc, #12]	; (800188c <USART2_RegisterCallback+0x20>)
 800187e:	6013      	str	r3, [r2, #0]
	}
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	2000008c 	.word	0x2000008c

08001890 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001890:	b5b0      	push	{r4, r5, r7, lr}
 8001892:	b090      	sub	sp, #64	; 0x40
 8001894:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001896:	f107 031c 	add.w	r3, r7, #28
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	605a      	str	r2, [r3, #4]
 80018a0:	609a      	str	r2, [r3, #8]
 80018a2:	60da      	str	r2, [r3, #12]
 80018a4:	611a      	str	r2, [r3, #16]
 80018a6:	615a      	str	r2, [r3, #20]
 80018a8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018aa:	1d3b      	adds	r3, r7, #4
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]
 80018b6:	611a      	str	r2, [r3, #16]
 80018b8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80018ba:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80018be:	f7ff fef7 	bl	80016b0 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80018c2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80018c6:	f7ff fedb 	bl	8001680 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_15;
 80018ca:	f248 0304 	movw	r3, #32772	; 0x8004
 80018ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80018d0:	2302      	movs	r3, #2
 80018d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80018d4:	2303      	movs	r3, #3
 80018d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80018d8:	2300      	movs	r3, #0
 80018da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80018e0:	2307      	movs	r3, #7
 80018e2:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e4:	1d3b      	adds	r3, r7, #4
 80018e6:	4619      	mov	r1, r3
 80018e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ec:	f000 fa28 	bl	8001d40 <LL_GPIO_Init>

  /* USART2 DMA Init */

  /* USART2_RX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80018f0:	2200      	movs	r2, #0
 80018f2:	2106      	movs	r1, #6
 80018f4:	485b      	ldr	r0, [pc, #364]	; (8001a64 <MX_USART2_UART_Init+0x1d4>)
 80018f6:	f7ff fcbf 	bl	8001278 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_LOW);
 80018fa:	2200      	movs	r2, #0
 80018fc:	2106      	movs	r1, #6
 80018fe:	4859      	ldr	r0, [pc, #356]	; (8001a64 <MX_USART2_UART_Init+0x1d4>)
 8001900:	f7ff fdac 	bl	800145c <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 8001904:	2200      	movs	r2, #0
 8001906:	2106      	movs	r1, #6
 8001908:	4856      	ldr	r0, [pc, #344]	; (8001a64 <MX_USART2_UART_Init+0x1d4>)
 800190a:	f7ff fcf3 	bl	80012f4 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 800190e:	2200      	movs	r2, #0
 8001910:	2106      	movs	r1, #6
 8001912:	4854      	ldr	r0, [pc, #336]	; (8001a64 <MX_USART2_UART_Init+0x1d4>)
 8001914:	f7ff fd12 	bl	800133c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 8001918:	2280      	movs	r2, #128	; 0x80
 800191a:	2106      	movs	r1, #6
 800191c:	4851      	ldr	r0, [pc, #324]	; (8001a64 <MX_USART2_UART_Init+0x1d4>)
 800191e:	f7ff fd31 	bl	8001384 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 8001922:	2200      	movs	r2, #0
 8001924:	2106      	movs	r1, #6
 8001926:	484f      	ldr	r0, [pc, #316]	; (8001a64 <MX_USART2_UART_Init+0x1d4>)
 8001928:	f7ff fd50 	bl	80013cc <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 800192c:	2200      	movs	r2, #0
 800192e:	2106      	movs	r1, #6
 8001930:	484c      	ldr	r0, [pc, #304]	; (8001a64 <MX_USART2_UART_Init+0x1d4>)
 8001932:	f7ff fd6f 	bl	8001414 <LL_DMA_SetMemorySize>

  /* USART2_TX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8001936:	2210      	movs	r2, #16
 8001938:	2107      	movs	r1, #7
 800193a:	484a      	ldr	r0, [pc, #296]	; (8001a64 <MX_USART2_UART_Init+0x1d4>)
 800193c:	f7ff fc9c 	bl	8001278 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_LOW);
 8001940:	2200      	movs	r2, #0
 8001942:	2107      	movs	r1, #7
 8001944:	4847      	ldr	r0, [pc, #284]	; (8001a64 <MX_USART2_UART_Init+0x1d4>)
 8001946:	f7ff fd89 	bl	800145c <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 800194a:	2200      	movs	r2, #0
 800194c:	2107      	movs	r1, #7
 800194e:	4845      	ldr	r0, [pc, #276]	; (8001a64 <MX_USART2_UART_Init+0x1d4>)
 8001950:	f7ff fcd0 	bl	80012f4 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 8001954:	2200      	movs	r2, #0
 8001956:	2107      	movs	r1, #7
 8001958:	4842      	ldr	r0, [pc, #264]	; (8001a64 <MX_USART2_UART_Init+0x1d4>)
 800195a:	f7ff fcef 	bl	800133c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 800195e:	2280      	movs	r2, #128	; 0x80
 8001960:	2107      	movs	r1, #7
 8001962:	4840      	ldr	r0, [pc, #256]	; (8001a64 <MX_USART2_UART_Init+0x1d4>)
 8001964:	f7ff fd0e 	bl	8001384 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 8001968:	2200      	movs	r2, #0
 800196a:	2107      	movs	r1, #7
 800196c:	483d      	ldr	r0, [pc, #244]	; (8001a64 <MX_USART2_UART_Init+0x1d4>)
 800196e:	f7ff fd2d 	bl	80013cc <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 8001972:	2200      	movs	r2, #0
 8001974:	2107      	movs	r1, #7
 8001976:	483b      	ldr	r0, [pc, #236]	; (8001a64 <MX_USART2_UART_Init+0x1d4>)
 8001978:	f7ff fd4c 	bl	8001414 <LL_DMA_SetMemorySize>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800197c:	f7ff fbd2 	bl	8001124 <__NVIC_GetPriorityGrouping>
 8001980:	4603      	mov	r3, r0
 8001982:	2200      	movs	r2, #0
 8001984:	2100      	movs	r1, #0
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff fc22 	bl	80011d0 <NVIC_EncodePriority>
 800198c:	4603      	mov	r3, r0
 800198e:	4619      	mov	r1, r3
 8001990:	2026      	movs	r0, #38	; 0x26
 8001992:	f7ff fbf3 	bl	800117c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8001996:	2026      	movs	r0, #38	; 0x26
 8001998:	f7ff fbd2 	bl	8001140 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  LL_DMA_ConfigAddresses(	DMA1, LL_DMA_CHANNEL_6,
 800199c:	2101      	movs	r1, #1
 800199e:	4832      	ldr	r0, [pc, #200]	; (8001a68 <MX_USART2_UART_Init+0x1d8>)
 80019a0:	f7ff ff4e 	bl	8001840 <LL_USART_DMA_GetRegAddr>
 80019a4:	4604      	mov	r4, r0
 80019a6:	4d31      	ldr	r5, [pc, #196]	; (8001a6c <MX_USART2_UART_Init+0x1dc>)
 80019a8:	2106      	movs	r1, #6
 80019aa:	482e      	ldr	r0, [pc, #184]	; (8001a64 <MX_USART2_UART_Init+0x1d4>)
 80019ac:	f7ff fc8a 	bl	80012c4 <LL_DMA_GetDataTransferDirection>
 80019b0:	4603      	mov	r3, r0
 80019b2:	9300      	str	r3, [sp, #0]
 80019b4:	462b      	mov	r3, r5
 80019b6:	4622      	mov	r2, r4
 80019b8:	2106      	movs	r1, #6
 80019ba:	482a      	ldr	r0, [pc, #168]	; (8001a64 <MX_USART2_UART_Init+0x1d4>)
 80019bc:	f7ff fdac 	bl	8001518 <LL_DMA_ConfigAddresses>
						 	LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
							(uint32_t)bufferUSART2dma,
							LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));

  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 80019c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019c4:	2106      	movs	r1, #6
 80019c6:	4827      	ldr	r0, [pc, #156]	; (8001a64 <MX_USART2_UART_Init+0x1d4>)
 80019c8:	f7ff fd6c 	bl	80014a4 <LL_DMA_SetDataLength>
  LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 80019cc:	2106      	movs	r1, #6
 80019ce:	4825      	ldr	r0, [pc, #148]	; (8001a64 <MX_USART2_UART_Init+0x1d4>)
 80019d0:	f7ff fc32 	bl	8001238 <LL_DMA_EnableChannel>
  LL_USART_EnableDMAReq_RX(USART2);
 80019d4:	4824      	ldr	r0, [pc, #144]	; (8001a68 <MX_USART2_UART_Init+0x1d8>)
 80019d6:	f7ff feed 	bl	80017b4 <LL_USART_EnableDMAReq_RX>

#if !POLLING
  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_6);
 80019da:	2106      	movs	r1, #6
 80019dc:	4821      	ldr	r0, [pc, #132]	; (8001a64 <MX_USART2_UART_Init+0x1d4>)
 80019de:	f7ff fdef 	bl	80015c0 <LL_DMA_EnableIT_TC>
  LL_DMA_EnableIT_HT(DMA1, LL_DMA_CHANNEL_6);
 80019e2:	2106      	movs	r1, #6
 80019e4:	481f      	ldr	r0, [pc, #124]	; (8001a64 <MX_USART2_UART_Init+0x1d4>)
 80019e6:	f7ff fe0b 	bl	8001600 <LL_DMA_EnableIT_HT>
#endif

  LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_7, LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_TRANSMIT));
 80019ea:	2100      	movs	r1, #0
 80019ec:	481e      	ldr	r0, [pc, #120]	; (8001a68 <MX_USART2_UART_Init+0x1d8>)
 80019ee:	f7ff ff27 	bl	8001840 <LL_USART_DMA_GetRegAddr>
 80019f2:	4603      	mov	r3, r0
 80019f4:	461a      	mov	r2, r3
 80019f6:	2107      	movs	r1, #7
 80019f8:	481a      	ldr	r0, [pc, #104]	; (8001a64 <MX_USART2_UART_Init+0x1d4>)
 80019fa:	f7ff fdc9 	bl	8001590 <LL_DMA_SetPeriphAddress>
  LL_USART_EnableDMAReq_TX(USART2);
 80019fe:	481a      	ldr	r0, [pc, #104]	; (8001a68 <MX_USART2_UART_Init+0x1d8>)
 8001a00:	f7ff fefb 	bl	80017fa <LL_USART_EnableDMAReq_TX>

  LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_7);
 8001a04:	2107      	movs	r1, #7
 8001a06:	4817      	ldr	r0, [pc, #92]	; (8001a64 <MX_USART2_UART_Init+0x1d4>)
 8001a08:	f7ff fe1a 	bl	8001640 <LL_DMA_EnableIT_TE>

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001a0c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001a10:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001a12:	2300      	movs	r3, #0
 8001a14:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001a16:	2300      	movs	r3, #0
 8001a18:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001a1e:	230c      	movs	r3, #12
 8001a20:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001a22:	2300      	movs	r3, #0
 8001a24:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001a26:	2300      	movs	r3, #0
 8001a28:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8001a2a:	f107 031c 	add.w	r3, r7, #28
 8001a2e:	4619      	mov	r1, r3
 8001a30:	480d      	ldr	r0, [pc, #52]	; (8001a68 <MX_USART2_UART_Init+0x1d8>)
 8001a32:	f001 f807 	bl	8002a44 <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART2);
 8001a36:	480c      	ldr	r0, [pc, #48]	; (8001a68 <MX_USART2_UART_Init+0x1d8>)
 8001a38:	f7ff fe99 	bl	800176e <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART2);
 8001a3c:	480a      	ldr	r0, [pc, #40]	; (8001a68 <MX_USART2_UART_Init+0x1d8>)
 8001a3e:	f7ff fe5f 	bl	8001700 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8001a42:	4809      	ldr	r0, [pc, #36]	; (8001a68 <MX_USART2_UART_Init+0x1d8>)
 8001a44:	f7ff fe4c 	bl	80016e0 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */
#if !POLLING
  LL_USART_EnableIT_IDLE(USART2);
 8001a48:	4807      	ldr	r0, [pc, #28]	; (8001a68 <MX_USART2_UART_Init+0x1d8>)
 8001a4a:	f7ff fe6f 	bl	800172c <LL_USART_EnableIT_IDLE>
#endif
  LL_USART_ConfigAsyncMode(USART2);
 8001a4e:	4806      	ldr	r0, [pc, #24]	; (8001a68 <MX_USART2_UART_Init+0x1d8>)
 8001a50:	f7ff fe56 	bl	8001700 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8001a54:	4804      	ldr	r0, [pc, #16]	; (8001a68 <MX_USART2_UART_Init+0x1d8>)
 8001a56:	f7ff fe43 	bl	80016e0 <LL_USART_Enable>
  /* USER CODE END USART2_Init 2 */

}
 8001a5a:	bf00      	nop
 8001a5c:	3738      	adds	r7, #56	; 0x38
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bdb0      	pop	{r4, r5, r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40020000 	.word	0x40020000
 8001a68:	40004400 	.word	0x40004400
 8001a6c:	200000dc 	.word	0x200000dc

08001a70 <USART2_CheckDmaReception>:

	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_7);
}

void USART2_CheckDmaReception(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
	if(USART2_ProcessData == 0) return;
 8001a76:	4b17      	ldr	r3, [pc, #92]	; (8001ad4 <USART2_CheckDmaReception+0x64>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d026      	beq.n	8001acc <USART2_CheckDmaReception+0x5c>

	uint16_t pos = DMA_USART2_BUFFER_SIZE - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_6);
 8001a7e:	2106      	movs	r1, #6
 8001a80:	4815      	ldr	r0, [pc, #84]	; (8001ad8 <USART2_CheckDmaReception+0x68>)
 8001a82:	f7ff fd33 	bl	80014ec <LL_DMA_GetDataLength>
 8001a86:	4603      	mov	r3, r0
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8001a8e:	80bb      	strh	r3, [r7, #4]
	uint16_t i = old_pos;
 8001a90:	4b12      	ldr	r3, [pc, #72]	; (8001adc <USART2_CheckDmaReception+0x6c>)
 8001a92:	881b      	ldrh	r3, [r3, #0]
 8001a94:	80fb      	strh	r3, [r7, #6]

	while(i < pos)
 8001a96:	e009      	b.n	8001aac <USART2_CheckDmaReception+0x3c>
	{
		USART2_ProcessData(bufferUSART2dma[i]);
 8001a98:	4b0e      	ldr	r3, [pc, #56]	; (8001ad4 <USART2_CheckDmaReception+0x64>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	88fa      	ldrh	r2, [r7, #6]
 8001a9e:	4910      	ldr	r1, [pc, #64]	; (8001ae0 <USART2_CheckDmaReception+0x70>)
 8001aa0:	5c8a      	ldrb	r2, [r1, r2]
 8001aa2:	4610      	mov	r0, r2
 8001aa4:	4798      	blx	r3
		i++;
 8001aa6:	88fb      	ldrh	r3, [r7, #6]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	80fb      	strh	r3, [r7, #6]
	while(i < pos)
 8001aac:	88fa      	ldrh	r2, [r7, #6]
 8001aae:	88bb      	ldrh	r3, [r7, #4]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d3f1      	bcc.n	8001a98 <USART2_CheckDmaReception+0x28>
	}

	old_pos = pos;
 8001ab4:	4a09      	ldr	r2, [pc, #36]	; (8001adc <USART2_CheckDmaReception+0x6c>)
 8001ab6:	88bb      	ldrh	r3, [r7, #4]
 8001ab8:	8013      	strh	r3, [r2, #0]

    if (old_pos == DMA_USART2_BUFFER_SIZE)
 8001aba:	4b08      	ldr	r3, [pc, #32]	; (8001adc <USART2_CheckDmaReception+0x6c>)
 8001abc:	881b      	ldrh	r3, [r3, #0]
 8001abe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ac2:	d104      	bne.n	8001ace <USART2_CheckDmaReception+0x5e>
    {
        old_pos = 0;
 8001ac4:	4b05      	ldr	r3, [pc, #20]	; (8001adc <USART2_CheckDmaReception+0x6c>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	801a      	strh	r2, [r3, #0]
 8001aca:	e000      	b.n	8001ace <USART2_CheckDmaReception+0x5e>
	if(USART2_ProcessData == 0) return;
 8001acc:	bf00      	nop
    }


}
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	2000008c 	.word	0x2000008c
 8001ad8:	40020000 	.word	0x40020000
 8001adc:	20000088 	.word	0x20000088
 8001ae0:	200000dc 	.word	0x200000dc

08001ae4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001ae4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b1c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ae8:	480d      	ldr	r0, [pc, #52]	; (8001b20 <LoopForever+0x6>)
  ldr r1, =_edata
 8001aea:	490e      	ldr	r1, [pc, #56]	; (8001b24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001aec:	4a0e      	ldr	r2, [pc, #56]	; (8001b28 <LoopForever+0xe>)
  movs r3, #0
 8001aee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001af0:	e002      	b.n	8001af8 <LoopCopyDataInit>

08001af2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001af2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001af4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001af6:	3304      	adds	r3, #4

08001af8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001af8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001afa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001afc:	d3f9      	bcc.n	8001af2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001afe:	4a0b      	ldr	r2, [pc, #44]	; (8001b2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b00:	4c0b      	ldr	r4, [pc, #44]	; (8001b30 <LoopForever+0x16>)
  movs r3, #0
 8001b02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b04:	e001      	b.n	8001b0a <LoopFillZerobss>

08001b06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b08:	3204      	adds	r2, #4

08001b0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b0c:	d3fb      	bcc.n	8001b06 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b0e:	f7ff f899 	bl	8000c44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b12:	f001 f86b 	bl	8002bec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b16:	f7fe fddb 	bl	80006d0 <main>

08001b1a <LoopForever>:

LoopForever:
    b LoopForever
 8001b1a:	e7fe      	b.n	8001b1a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001b1c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001b20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b24:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001b28:	08002ed4 	.word	0x08002ed4
  ldr r2, =_sbss
 8001b2c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001b30:	200001dc 	.word	0x200001dc

08001b34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b34:	e7fe      	b.n	8001b34 <ADC1_2_IRQHandler>

08001b36 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001b36:	b480      	push	{r7}
 8001b38:	b089      	sub	sp, #36	; 0x24
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	60f8      	str	r0, [r7, #12]
 8001b3e:	60b9      	str	r1, [r7, #8]
 8001b40:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	fa93 f3a3 	rbit	r3, r3
 8001b50:	613b      	str	r3, [r7, #16]
  return result;
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	fab3 f383 	clz	r3, r3
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	2103      	movs	r1, #3
 8001b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b62:	43db      	mvns	r3, r3
 8001b64:	401a      	ands	r2, r3
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	fa93 f3a3 	rbit	r3, r3
 8001b70:	61bb      	str	r3, [r7, #24]
  return result;
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	fab3 f383 	clz	r3, r3
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	6879      	ldr	r1, [r7, #4]
 8001b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b82:	431a      	orrs	r2, r3
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	601a      	str	r2, [r3, #0]
}
 8001b88:	bf00      	nop
 8001b8a:	3724      	adds	r7, #36	; 0x24
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	685a      	ldr	r2, [r3, #4]
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	401a      	ands	r2, r3
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	6879      	ldr	r1, [r7, #4]
 8001bae:	fb01 f303 	mul.w	r3, r1, r3
 8001bb2:	431a      	orrs	r2, r3
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	605a      	str	r2, [r3, #4]
}
 8001bb8:	bf00      	nop
 8001bba:	3714      	adds	r7, #20
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b089      	sub	sp, #36	; 0x24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	689a      	ldr	r2, [r3, #8]
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	fa93 f3a3 	rbit	r3, r3
 8001bde:	613b      	str	r3, [r7, #16]
  return result;
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	fab3 f383 	clz	r3, r3
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	2103      	movs	r1, #3
 8001bec:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	401a      	ands	r2, r3
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	fa93 f3a3 	rbit	r3, r3
 8001bfe:	61bb      	str	r3, [r7, #24]
  return result;
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	fab3 f383 	clz	r3, r3
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	6879      	ldr	r1, [r7, #4]
 8001c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c10:	431a      	orrs	r2, r3
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8001c16:	bf00      	nop
 8001c18:	3724      	adds	r7, #36	; 0x24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b089      	sub	sp, #36	; 0x24
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	60f8      	str	r0, [r7, #12]
 8001c2a:	60b9      	str	r1, [r7, #8]
 8001c2c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	68da      	ldr	r2, [r3, #12]
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	fa93 f3a3 	rbit	r3, r3
 8001c3c:	613b      	str	r3, [r7, #16]
  return result;
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	fab3 f383 	clz	r3, r3
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	2103      	movs	r1, #3
 8001c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	401a      	ands	r2, r3
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	fa93 f3a3 	rbit	r3, r3
 8001c5c:	61bb      	str	r3, [r7, #24]
  return result;
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	fab3 f383 	clz	r3, r3
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	6879      	ldr	r1, [r7, #4]
 8001c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	60da      	str	r2, [r3, #12]
}
 8001c74:	bf00      	nop
 8001c76:	3724      	adds	r7, #36	; 0x24
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b089      	sub	sp, #36	; 0x24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6a1a      	ldr	r2, [r3, #32]
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	fa93 f3a3 	rbit	r3, r3
 8001c9a:	613b      	str	r3, [r7, #16]
  return result;
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	fab3 f383 	clz	r3, r3
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	210f      	movs	r1, #15
 8001ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cac:	43db      	mvns	r3, r3
 8001cae:	401a      	ands	r2, r3
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	fa93 f3a3 	rbit	r3, r3
 8001cba:	61bb      	str	r3, [r7, #24]
  return result;
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	fab3 f383 	clz	r3, r3
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	6879      	ldr	r1, [r7, #4]
 8001cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8001cd2:	bf00      	nop
 8001cd4:	3724      	adds	r7, #36	; 0x24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b089      	sub	sp, #36	; 0x24
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	60f8      	str	r0, [r7, #12]
 8001ce6:	60b9      	str	r1, [r7, #8]
 8001ce8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	0a1b      	lsrs	r3, r3, #8
 8001cf2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	fa93 f3a3 	rbit	r3, r3
 8001cfa:	613b      	str	r3, [r7, #16]
  return result;
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	fab3 f383 	clz	r3, r3
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	210f      	movs	r1, #15
 8001d08:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	401a      	ands	r2, r3
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	0a1b      	lsrs	r3, r3, #8
 8001d14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	fa93 f3a3 	rbit	r3, r3
 8001d1c:	61bb      	str	r3, [r7, #24]
  return result;
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	fab3 f383 	clz	r3, r3
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	6879      	ldr	r1, [r7, #4]
 8001d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2e:	431a      	orrs	r2, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8001d34:	bf00      	nop
 8001d36:	3724      	adds	r7, #36	; 0x24
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b088      	sub	sp, #32
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	fa93 f3a3 	rbit	r3, r3
 8001d56:	613b      	str	r3, [r7, #16]
  return result;
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	fab3 f383 	clz	r3, r3
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001d62:	e051      	b.n	8001e08 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	2101      	movs	r1, #1
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d70:	4013      	ands	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d043      	beq.n	8001e02 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d003      	beq.n	8001d8a <LL_GPIO_Init+0x4a>
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d10e      	bne.n	8001da8 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	69b9      	ldr	r1, [r7, #24]
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7ff ff16 	bl	8001bc4 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	6819      	ldr	r1, [r3, #0]
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	461a      	mov	r2, r3
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7ff fef6 	bl	8001b94 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	461a      	mov	r2, r3
 8001dae:	69b9      	ldr	r1, [r7, #24]
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f7ff ff36 	bl	8001c22 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d11a      	bne.n	8001df4 <LL_GPIO_Init+0xb4>
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	fa93 f3a3 	rbit	r3, r3
 8001dc8:	60bb      	str	r3, [r7, #8]
  return result;
 8001dca:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001dcc:	fab3 f383 	clz	r3, r3
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b07      	cmp	r3, #7
 8001dd4:	d807      	bhi.n	8001de6 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	695b      	ldr	r3, [r3, #20]
 8001dda:	461a      	mov	r2, r3
 8001ddc:	69b9      	ldr	r1, [r7, #24]
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f7ff ff4e 	bl	8001c80 <LL_GPIO_SetAFPin_0_7>
 8001de4:	e006      	b.n	8001df4 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	695b      	ldr	r3, [r3, #20]
 8001dea:	461a      	mov	r2, r3
 8001dec:	69b9      	ldr	r1, [r7, #24]
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f7ff ff75 	bl	8001cde <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	461a      	mov	r2, r3
 8001dfa:	69b9      	ldr	r1, [r7, #24]
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f7ff fe9a 	bl	8001b36 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	3301      	adds	r3, #1
 8001e06:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1a6      	bne.n	8001d64 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3720      	adds	r7, #32
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <LL_RCC_HSI_IsReady>:
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001e24:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <LL_RCC_HSI_IsReady+0x20>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	bf0c      	ite	eq
 8001e30:	2301      	moveq	r3, #1
 8001e32:	2300      	movne	r3, #0
 8001e34:	b2db      	uxtb	r3, r3
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr
 8001e40:	40021000 	.word	0x40021000

08001e44 <LL_RCC_LSE_IsReady>:
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8001e48:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <LL_RCC_LSE_IsReady+0x20>)
 8001e4a:	6a1b      	ldr	r3, [r3, #32]
 8001e4c:	f003 0302 	and.w	r3, r3, #2
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	bf0c      	ite	eq
 8001e54:	2301      	moveq	r3, #1
 8001e56:	2300      	movne	r3, #0
 8001e58:	b2db      	uxtb	r3, r3
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	40021000 	.word	0x40021000

08001e68 <LL_RCC_GetSysClkSource>:
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001e6c:	4b04      	ldr	r3, [pc, #16]	; (8001e80 <LL_RCC_GetSysClkSource+0x18>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f003 030c 	and.w	r3, r3, #12
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	40021000 	.word	0x40021000

08001e84 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001e88:	4b04      	ldr	r3, [pc, #16]	; (8001e9c <LL_RCC_GetAHBPrescaler+0x18>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	40021000 	.word	0x40021000

08001ea0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001ea4:	4b04      	ldr	r3, [pc, #16]	; (8001eb8 <LL_RCC_GetAPB1Prescaler+0x18>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	40021000 	.word	0x40021000

08001ebc <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001ec0:	4b04      	ldr	r3, [pc, #16]	; (8001ed4 <LL_RCC_GetAPB2Prescaler+0x18>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	40021000 	.word	0x40021000

08001ed8 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8001ee0:	4b07      	ldr	r3, [pc, #28]	; (8001f00 <LL_RCC_GetUSARTClockSource+0x28>)
 8001ee2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ee4:	2103      	movs	r1, #3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8001eec:	401a      	ands	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	061b      	lsls	r3, r3, #24
 8001ef2:	4313      	orrs	r3, r2
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	40021000 	.word	0x40021000

08001f04 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8001f08:	4b04      	ldr	r3, [pc, #16]	; (8001f1c <LL_RCC_PLL_GetMainSource+0x18>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	40021000 	.word	0x40021000

08001f20 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8001f24:	4b04      	ldr	r3, [pc, #16]	; (8001f38 <LL_RCC_PLL_GetMultiplicator+0x18>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	40021000 	.word	0x40021000

08001f3c <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8001f40:	4b04      	ldr	r3, [pc, #16]	; (8001f54 <LL_RCC_PLL_GetPrediv+0x18>)
 8001f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f44:	f003 030f 	and.w	r3, r3, #15
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	40021000 	.word	0x40021000

08001f58 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001f60:	f000 f864 	bl	800202c <RCC_GetSystemClockFreq>
 8001f64:	4602      	mov	r2, r0
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f000 f882 	bl	8002078 <RCC_GetHCLKClockFreq>
 8001f74:	4602      	mov	r2, r0
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f000 f890 	bl	80020a4 <RCC_GetPCLK1ClockFreq>
 8001f84:	4602      	mov	r2, r0
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f000 f89c 	bl	80020cc <RCC_GetPCLK2ClockFreq>
 8001f94:	4602      	mov	r2, r0
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	60da      	str	r2, [r3, #12]
}
 8001f9a:	bf00      	nop
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
	...

08001fa4 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8001fac:	2300      	movs	r3, #0
 8001fae:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d12d      	bne.n	8002012 <LL_RCC_GetUSARTClockFreq+0x6e>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f7ff ff8e 	bl	8001ed8 <LL_RCC_GetUSARTClockSource>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b03      	cmp	r3, #3
 8001fc0:	d00a      	beq.n	8001fd8 <LL_RCC_GetUSARTClockFreq+0x34>
 8001fc2:	2b03      	cmp	r3, #3
 8001fc4:	d819      	bhi.n	8001ffa <LL_RCC_GetUSARTClockFreq+0x56>
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d002      	beq.n	8001fd0 <LL_RCC_GetUSARTClockFreq+0x2c>
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d00c      	beq.n	8001fe8 <LL_RCC_GetUSARTClockFreq+0x44>
 8001fce:	e014      	b.n	8001ffa <LL_RCC_GetUSARTClockFreq+0x56>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8001fd0:	f000 f82c 	bl	800202c <RCC_GetSystemClockFreq>
 8001fd4:	60f8      	str	r0, [r7, #12]
        break;
 8001fd6:	e021      	b.n	800201c <LL_RCC_GetUSARTClockFreq+0x78>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8001fd8:	f7ff ff22 	bl	8001e20 <LL_RCC_HSI_IsReady>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d019      	beq.n	8002016 <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = HSI_VALUE;
 8001fe2:	4b11      	ldr	r3, [pc, #68]	; (8002028 <LL_RCC_GetUSARTClockFreq+0x84>)
 8001fe4:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001fe6:	e016      	b.n	8002016 <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8001fe8:	f7ff ff2c 	bl	8001e44 <LL_RCC_LSE_IsReady>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d013      	beq.n	800201a <LL_RCC_GetUSARTClockFreq+0x76>
        {
          usart_frequency = LSE_VALUE;
 8001ff2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ff6:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001ff8:	e00f      	b.n	800201a <LL_RCC_GetUSARTClockFreq+0x76>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001ffa:	f000 f817 	bl	800202c <RCC_GetSystemClockFreq>
 8001ffe:	4603      	mov	r3, r0
 8002000:	4618      	mov	r0, r3
 8002002:	f000 f839 	bl	8002078 <RCC_GetHCLKClockFreq>
 8002006:	4603      	mov	r3, r0
 8002008:	4618      	mov	r0, r3
 800200a:	f000 f84b 	bl	80020a4 <RCC_GetPCLK1ClockFreq>
 800200e:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 8002010:	e004      	b.n	800201c <LL_RCC_GetUSARTClockFreq+0x78>
    }
  }
 8002012:	bf00      	nop
 8002014:	e002      	b.n	800201c <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 8002016:	bf00      	nop
 8002018:	e000      	b.n	800201c <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 800201a:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 800201c:	68fb      	ldr	r3, [r7, #12]
}
 800201e:	4618      	mov	r0, r3
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	007a1200 	.word	0x007a1200

0800202c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8002032:	2300      	movs	r3, #0
 8002034:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002036:	f7ff ff17 	bl	8001e68 <LL_RCC_GetSysClkSource>
 800203a:	4603      	mov	r3, r0
 800203c:	2b08      	cmp	r3, #8
 800203e:	d00c      	beq.n	800205a <RCC_GetSystemClockFreq+0x2e>
 8002040:	2b08      	cmp	r3, #8
 8002042:	d80e      	bhi.n	8002062 <RCC_GetSystemClockFreq+0x36>
 8002044:	2b00      	cmp	r3, #0
 8002046:	d002      	beq.n	800204e <RCC_GetSystemClockFreq+0x22>
 8002048:	2b04      	cmp	r3, #4
 800204a:	d003      	beq.n	8002054 <RCC_GetSystemClockFreq+0x28>
 800204c:	e009      	b.n	8002062 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800204e:	4b09      	ldr	r3, [pc, #36]	; (8002074 <RCC_GetSystemClockFreq+0x48>)
 8002050:	607b      	str	r3, [r7, #4]
      break;
 8002052:	e009      	b.n	8002068 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002054:	4b07      	ldr	r3, [pc, #28]	; (8002074 <RCC_GetSystemClockFreq+0x48>)
 8002056:	607b      	str	r3, [r7, #4]
      break;
 8002058:	e006      	b.n	8002068 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800205a:	f000 f84b 	bl	80020f4 <RCC_PLL_GetFreqDomain_SYS>
 800205e:	6078      	str	r0, [r7, #4]
      break;
 8002060:	e002      	b.n	8002068 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8002062:	4b04      	ldr	r3, [pc, #16]	; (8002074 <RCC_GetSystemClockFreq+0x48>)
 8002064:	607b      	str	r3, [r7, #4]
      break;
 8002066:	bf00      	nop
  }

  return frequency;
 8002068:	687b      	ldr	r3, [r7, #4]
}
 800206a:	4618      	mov	r0, r3
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	007a1200 	.word	0x007a1200

08002078 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002080:	f7ff ff00 	bl	8001e84 <LL_RCC_GetAHBPrescaler>
 8002084:	4603      	mov	r3, r0
 8002086:	091b      	lsrs	r3, r3, #4
 8002088:	f003 030f 	and.w	r3, r3, #15
 800208c:	4a04      	ldr	r2, [pc, #16]	; (80020a0 <RCC_GetHCLKClockFreq+0x28>)
 800208e:	5cd3      	ldrb	r3, [r2, r3]
 8002090:	461a      	mov	r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	40d3      	lsrs	r3, r2
}
 8002096:	4618      	mov	r0, r3
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	08002d94 	.word	0x08002d94

080020a4 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80020ac:	f7ff fef8 	bl	8001ea0 <LL_RCC_GetAPB1Prescaler>
 80020b0:	4603      	mov	r3, r0
 80020b2:	0a1b      	lsrs	r3, r3, #8
 80020b4:	4a04      	ldr	r2, [pc, #16]	; (80020c8 <RCC_GetPCLK1ClockFreq+0x24>)
 80020b6:	5cd3      	ldrb	r3, [r2, r3]
 80020b8:	461a      	mov	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	40d3      	lsrs	r3, r2
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	08002da4 	.word	0x08002da4

080020cc <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80020d4:	f7ff fef2 	bl	8001ebc <LL_RCC_GetAPB2Prescaler>
 80020d8:	4603      	mov	r3, r0
 80020da:	0adb      	lsrs	r3, r3, #11
 80020dc:	4a04      	ldr	r2, [pc, #16]	; (80020f0 <RCC_GetPCLK2ClockFreq+0x24>)
 80020de:	5cd3      	ldrb	r3, [r2, r3]
 80020e0:	461a      	mov	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	40d3      	lsrs	r3, r2
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	08002da4 	.word	0x08002da4

080020f4 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80020f4:	b590      	push	{r4, r7, lr}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 80020fa:	2300      	movs	r3, #0
 80020fc:	60fb      	str	r3, [r7, #12]
 80020fe:	2300      	movs	r3, #0
 8002100:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002102:	f7ff feff 	bl	8001f04 <LL_RCC_PLL_GetMainSource>
 8002106:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d004      	beq.n	8002118 <RCC_PLL_GetFreqDomain_SYS+0x24>
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002114:	d003      	beq.n	800211e <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8002116:	e005      	b.n	8002124 <RCC_PLL_GetFreqDomain_SYS+0x30>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8002118:	4b13      	ldr	r3, [pc, #76]	; (8002168 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800211a:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 800211c:	e005      	b.n	800212a <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800211e:	4b13      	ldr	r3, [pc, #76]	; (800216c <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8002120:	60fb      	str	r3, [r7, #12]
      break;
 8002122:	e002      	b.n	800212a <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 8002124:	4b10      	ldr	r3, [pc, #64]	; (8002168 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002126:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8002128:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 800212a:	f7ff ff07 	bl	8001f3c <LL_RCC_PLL_GetPrediv>
 800212e:	4603      	mov	r3, r0
 8002130:	3301      	adds	r3, #1
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	fbb2 f4f3 	udiv	r4, r2, r3
 8002138:	f7ff fef2 	bl	8001f20 <LL_RCC_PLL_GetMultiplicator>
 800213c:	4603      	mov	r3, r0
 800213e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002142:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002146:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	fa92 f2a2 	rbit	r2, r2
 800214e:	603a      	str	r2, [r7, #0]
  return result;
 8002150:	683a      	ldr	r2, [r7, #0]
 8002152:	fab2 f282 	clz	r2, r2
 8002156:	b2d2      	uxtb	r2, r2
 8002158:	40d3      	lsrs	r3, r2
 800215a:	3302      	adds	r3, #2
 800215c:	fb03 f304 	mul.w	r3, r3, r4
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 8002160:	4618      	mov	r0, r3
 8002162:	3714      	adds	r7, #20
 8002164:	46bd      	mov	sp, r7
 8002166:	bd90      	pop	{r4, r7, pc}
 8002168:	003d0900 	.word	0x003d0900
 800216c:	007a1200 	.word	0x007a1200

08002170 <LL_TIM_SetPrescaler>:
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	683a      	ldr	r2, [r7, #0]
 800217e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002180:	bf00      	nop
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <LL_TIM_SetAutoReload>:
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	683a      	ldr	r2, [r7, #0]
 800219a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <LL_TIM_SetRepetitionCounter>:
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	683a      	ldr	r2, [r7, #0]
 80021b6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <LL_TIM_OC_SetCompareCH1>:
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <LL_TIM_OC_SetCompareCH2>:
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	683a      	ldr	r2, [r7, #0]
 80021ee:	639a      	str	r2, [r3, #56]	; 0x38
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <LL_TIM_OC_SetCompareCH3>:
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <LL_TIM_OC_SetCompareCH4>:
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	683a      	ldr	r2, [r7, #0]
 8002226:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002228:	bf00      	nop
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <LL_TIM_OC_SetCompareCH5>:
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	683a      	ldr	r2, [r7, #0]
 8002246:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <LL_TIM_OC_SetCompareCH6>:
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	683a      	ldr	r2, [r7, #0]
 8002262:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	695b      	ldr	r3, [r3, #20]
 800227c:	f043 0201 	orr.w	r2, r3, #1
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	615a      	str	r2, [r3, #20]
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4a2f      	ldr	r2, [pc, #188]	; (8002360 <LL_TIM_Init+0xd0>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d007      	beq.n	80022b8 <LL_TIM_Init+0x28>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022ae:	d003      	beq.n	80022b8 <LL_TIM_Init+0x28>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4a2c      	ldr	r2, [pc, #176]	; (8002364 <LL_TIM_Init+0xd4>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d106      	bne.n	80022c6 <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a25      	ldr	r2, [pc, #148]	; (8002360 <LL_TIM_Init+0xd0>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d013      	beq.n	80022f6 <LL_TIM_Init+0x66>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022d4:	d00f      	beq.n	80022f6 <LL_TIM_Init+0x66>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a22      	ldr	r2, [pc, #136]	; (8002364 <LL_TIM_Init+0xd4>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d00b      	beq.n	80022f6 <LL_TIM_Init+0x66>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a21      	ldr	r2, [pc, #132]	; (8002368 <LL_TIM_Init+0xd8>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d007      	beq.n	80022f6 <LL_TIM_Init+0x66>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a20      	ldr	r2, [pc, #128]	; (800236c <LL_TIM_Init+0xdc>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d003      	beq.n	80022f6 <LL_TIM_Init+0x66>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a1f      	ldr	r2, [pc, #124]	; (8002370 <LL_TIM_Init+0xe0>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d106      	bne.n	8002304 <LL_TIM_Init+0x74>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	4313      	orrs	r3, r2
 8002302:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	4619      	mov	r1, r3
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f7ff ff3b 	bl	800218c <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	881b      	ldrh	r3, [r3, #0]
 800231a:	4619      	mov	r1, r3
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f7ff ff27 	bl	8002170 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a0e      	ldr	r2, [pc, #56]	; (8002360 <LL_TIM_Init+0xd0>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d00b      	beq.n	8002342 <LL_TIM_Init+0xb2>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a0e      	ldr	r2, [pc, #56]	; (8002368 <LL_TIM_Init+0xd8>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d007      	beq.n	8002342 <LL_TIM_Init+0xb2>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a0d      	ldr	r2, [pc, #52]	; (800236c <LL_TIM_Init+0xdc>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d003      	beq.n	8002342 <LL_TIM_Init+0xb2>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a0c      	ldr	r2, [pc, #48]	; (8002370 <LL_TIM_Init+0xe0>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d105      	bne.n	800234e <LL_TIM_Init+0xbe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	4619      	mov	r1, r3
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f7ff ff2d 	bl	80021a8 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f7ff ff8e 	bl	8002270 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	40012c00 	.word	0x40012c00
 8002364:	40000400 	.word	0x40000400
 8002368:	40014000 	.word	0x40014000
 800236c:	40014400 	.word	0x40014400
 8002370:	40014800 	.word	0x40014800

08002374 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b086      	sub	sp, #24
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800238a:	d045      	beq.n	8002418 <LL_TIM_OC_Init+0xa4>
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002392:	d848      	bhi.n	8002426 <LL_TIM_OC_Init+0xb2>
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800239a:	d036      	beq.n	800240a <LL_TIM_OC_Init+0x96>
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023a2:	d840      	bhi.n	8002426 <LL_TIM_OC_Init+0xb2>
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023aa:	d027      	beq.n	80023fc <LL_TIM_OC_Init+0x88>
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023b2:	d838      	bhi.n	8002426 <LL_TIM_OC_Init+0xb2>
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023ba:	d018      	beq.n	80023ee <LL_TIM_OC_Init+0x7a>
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023c2:	d830      	bhi.n	8002426 <LL_TIM_OC_Init+0xb2>
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d003      	beq.n	80023d2 <LL_TIM_OC_Init+0x5e>
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	2b10      	cmp	r3, #16
 80023ce:	d007      	beq.n	80023e0 <LL_TIM_OC_Init+0x6c>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 80023d0:	e029      	b.n	8002426 <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80023d2:	6879      	ldr	r1, [r7, #4]
 80023d4:	68f8      	ldr	r0, [r7, #12]
 80023d6:	f000 f82d 	bl	8002434 <OC1Config>
 80023da:	4603      	mov	r3, r0
 80023dc:	75fb      	strb	r3, [r7, #23]
      break;
 80023de:	e023      	b.n	8002428 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80023e0:	6879      	ldr	r1, [r7, #4]
 80023e2:	68f8      	ldr	r0, [r7, #12]
 80023e4:	f000 f8a0 	bl	8002528 <OC2Config>
 80023e8:	4603      	mov	r3, r0
 80023ea:	75fb      	strb	r3, [r7, #23]
      break;
 80023ec:	e01c      	b.n	8002428 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	68f8      	ldr	r0, [r7, #12]
 80023f2:	f000 f917 	bl	8002624 <OC3Config>
 80023f6:	4603      	mov	r3, r0
 80023f8:	75fb      	strb	r3, [r7, #23]
      break;
 80023fa:	e015      	b.n	8002428 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80023fc:	6879      	ldr	r1, [r7, #4]
 80023fe:	68f8      	ldr	r0, [r7, #12]
 8002400:	f000 f98e 	bl	8002720 <OC4Config>
 8002404:	4603      	mov	r3, r0
 8002406:	75fb      	strb	r3, [r7, #23]
      break;
 8002408:	e00e      	b.n	8002428 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 800240a:	6879      	ldr	r1, [r7, #4]
 800240c:	68f8      	ldr	r0, [r7, #12]
 800240e:	f000 f9ed 	bl	80027ec <OC5Config>
 8002412:	4603      	mov	r3, r0
 8002414:	75fb      	strb	r3, [r7, #23]
      break;
 8002416:	e007      	b.n	8002428 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8002418:	6879      	ldr	r1, [r7, #4]
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f000 fa44 	bl	80028a8 <OC6Config>
 8002420:	4603      	mov	r3, r0
 8002422:	75fb      	strb	r3, [r7, #23]
      break;
 8002424:	e000      	b.n	8002428 <LL_TIM_OC_Init+0xb4>
      break;
 8002426:	bf00      	nop
  }

  return result;
 8002428:	7dfb      	ldrb	r3, [r7, #23]
}
 800242a:	4618      	mov	r0, r3
 800242c:	3718      	adds	r7, #24
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
	...

08002434 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a1b      	ldr	r3, [r3, #32]
 8002442:	f023 0201 	bic.w	r2, r3, #1
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a1b      	ldr	r3, [r3, #32]
 800244e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f023 0303 	bic.w	r3, r3, #3
 8002462:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800246a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	6812      	ldr	r2, [r2, #0]
 8002472:	4313      	orrs	r3, r2
 8002474:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	f023 0202 	bic.w	r2, r3, #2
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	691b      	ldr	r3, [r3, #16]
 8002480:	4313      	orrs	r3, r2
 8002482:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	f023 0201 	bic.w	r2, r3, #1
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	4313      	orrs	r3, r2
 8002490:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a20      	ldr	r2, [pc, #128]	; (8002518 <OC1Config+0xe4>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d00b      	beq.n	80024b2 <OC1Config+0x7e>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a1f      	ldr	r2, [pc, #124]	; (800251c <OC1Config+0xe8>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d007      	beq.n	80024b2 <OC1Config+0x7e>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a1e      	ldr	r2, [pc, #120]	; (8002520 <OC1Config+0xec>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d003      	beq.n	80024b2 <OC1Config+0x7e>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a1d      	ldr	r2, [pc, #116]	; (8002524 <OC1Config+0xf0>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d11e      	bne.n	80024f0 <OC1Config+0xbc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	f023 0208 	bic.w	r2, r3, #8
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	695b      	ldr	r3, [r3, #20]
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	4313      	orrs	r3, r2
 80024c0:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	f023 0204 	bic.w	r2, r3, #4
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	4313      	orrs	r3, r2
 80024d0:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	4313      	orrs	r3, r2
 80024de:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	69db      	ldr	r3, [r3, #28]
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	4313      	orrs	r3, r2
 80024ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	68fa      	ldr	r2, [r7, #12]
 80024fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	4619      	mov	r1, r3
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f7ff fe5e 	bl	80021c4 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800250e:	2300      	movs	r3, #0
}
 8002510:	4618      	mov	r0, r3
 8002512:	3718      	adds	r7, #24
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	40012c00 	.word	0x40012c00
 800251c:	40014000 	.word	0x40014000
 8002520:	40014400 	.word	0x40014400
 8002524:	40014800 	.word	0x40014800

08002528 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b086      	sub	sp, #24
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a1b      	ldr	r3, [r3, #32]
 8002536:	f023 0210 	bic.w	r2, r3, #16
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a1b      	ldr	r3, [r3, #32]
 8002542:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002556:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800255e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002562:	683a      	ldr	r2, [r7, #0]
 8002564:	6812      	ldr	r2, [r2, #0]
 8002566:	0212      	lsls	r2, r2, #8
 8002568:	4313      	orrs	r3, r2
 800256a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	f023 0220 	bic.w	r2, r3, #32
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	011b      	lsls	r3, r3, #4
 8002578:	4313      	orrs	r3, r2
 800257a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	f023 0210 	bic.w	r2, r3, #16
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	011b      	lsls	r3, r3, #4
 8002588:	4313      	orrs	r3, r2
 800258a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4a21      	ldr	r2, [pc, #132]	; (8002614 <OC2Config+0xec>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d00b      	beq.n	80025ac <OC2Config+0x84>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4a20      	ldr	r2, [pc, #128]	; (8002618 <OC2Config+0xf0>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d007      	beq.n	80025ac <OC2Config+0x84>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	4a1f      	ldr	r2, [pc, #124]	; (800261c <OC2Config+0xf4>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d003      	beq.n	80025ac <OC2Config+0x84>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	4a1e      	ldr	r2, [pc, #120]	; (8002620 <OC2Config+0xf8>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d11f      	bne.n	80025ec <OC2Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	695b      	ldr	r3, [r3, #20]
 80025b6:	019b      	lsls	r3, r3, #6
 80025b8:	4313      	orrs	r3, r2
 80025ba:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	019b      	lsls	r3, r3, #6
 80025c8:	4313      	orrs	r3, r2
 80025ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	4313      	orrs	r3, r2
 80025da:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	69db      	ldr	r3, [r3, #28]
 80025e6:	00db      	lsls	r3, r3, #3
 80025e8:	4313      	orrs	r3, r2
 80025ea:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	4619      	mov	r1, r3
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f7ff fdee 	bl	80021e0 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	697a      	ldr	r2, [r7, #20]
 8002608:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800260a:	2300      	movs	r3, #0
}
 800260c:	4618      	mov	r0, r3
 800260e:	3718      	adds	r7, #24
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	40012c00 	.word	0x40012c00
 8002618:	40014000 	.word	0x40014000
 800261c:	40014400 	.word	0x40014400
 8002620:	40014800 	.word	0x40014800

08002624 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a1b      	ldr	r3, [r3, #32]
 8002632:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a1b      	ldr	r3, [r3, #32]
 800263e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	69db      	ldr	r3, [r3, #28]
 800264a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f023 0303 	bic.w	r3, r3, #3
 8002652:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800265a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800265e:	683a      	ldr	r2, [r7, #0]
 8002660:	6812      	ldr	r2, [r2, #0]
 8002662:	4313      	orrs	r3, r2
 8002664:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	021b      	lsls	r3, r3, #8
 8002672:	4313      	orrs	r3, r2
 8002674:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	021b      	lsls	r3, r3, #8
 8002682:	4313      	orrs	r3, r2
 8002684:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a21      	ldr	r2, [pc, #132]	; (8002710 <OC3Config+0xec>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d00b      	beq.n	80026a6 <OC3Config+0x82>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a20      	ldr	r2, [pc, #128]	; (8002714 <OC3Config+0xf0>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d007      	beq.n	80026a6 <OC3Config+0x82>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a1f      	ldr	r2, [pc, #124]	; (8002718 <OC3Config+0xf4>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d003      	beq.n	80026a6 <OC3Config+0x82>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a1e      	ldr	r2, [pc, #120]	; (800271c <OC3Config+0xf8>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d11f      	bne.n	80026e6 <OC3Config+0xc2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	695b      	ldr	r3, [r3, #20]
 80026b0:	029b      	lsls	r3, r3, #10
 80026b2:	4313      	orrs	r3, r2
 80026b4:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	029b      	lsls	r3, r3, #10
 80026c2:	4313      	orrs	r3, r2
 80026c4:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	011b      	lsls	r3, r3, #4
 80026d2:	4313      	orrs	r3, r2
 80026d4:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	69db      	ldr	r3, [r3, #28]
 80026e0:	015b      	lsls	r3, r3, #5
 80026e2:	4313      	orrs	r3, r2
 80026e4:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	693a      	ldr	r2, [r7, #16]
 80026ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	4619      	mov	r1, r3
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f7ff fd7f 	bl	80021fc <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	697a      	ldr	r2, [r7, #20]
 8002702:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3718      	adds	r7, #24
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	40012c00 	.word	0x40012c00
 8002714:	40014000 	.word	0x40014000
 8002718:	40014400 	.word	0x40014400
 800271c:	40014800 	.word	0x40014800

08002720 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a1b      	ldr	r3, [r3, #32]
 800272e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	69db      	ldr	r3, [r3, #28]
 8002746:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800274e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002756:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800275a:	683a      	ldr	r2, [r7, #0]
 800275c:	6812      	ldr	r2, [r2, #0]
 800275e:	0212      	lsls	r2, r2, #8
 8002760:	4313      	orrs	r3, r2
 8002762:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	031b      	lsls	r3, r3, #12
 8002770:	4313      	orrs	r3, r2
 8002772:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	031b      	lsls	r3, r3, #12
 8002780:	4313      	orrs	r3, r2
 8002782:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a15      	ldr	r2, [pc, #84]	; (80027dc <OC4Config+0xbc>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d00b      	beq.n	80027a4 <OC4Config+0x84>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4a14      	ldr	r2, [pc, #80]	; (80027e0 <OC4Config+0xc0>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d007      	beq.n	80027a4 <OC4Config+0x84>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a13      	ldr	r2, [pc, #76]	; (80027e4 <OC4Config+0xc4>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d003      	beq.n	80027a4 <OC4Config+0x84>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a12      	ldr	r2, [pc, #72]	; (80027e8 <OC4Config+0xc8>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d107      	bne.n	80027b4 <OC4Config+0x94>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	019b      	lsls	r3, r3, #6
 80027b0:	4313      	orrs	r3, r2
 80027b2:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	697a      	ldr	r2, [r7, #20]
 80027b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	68fa      	ldr	r2, [r7, #12]
 80027be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	4619      	mov	r1, r3
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f7ff fd26 	bl	8002218 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3718      	adds	r7, #24
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	40012c00 	.word	0x40012c00
 80027e0:	40014000 	.word	0x40014000
 80027e4:	40014400 	.word	0x40014400
 80027e8:	40014800 	.word	0x40014800

080027ec <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a1b      	ldr	r3, [r3, #32]
 80027fa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a1b      	ldr	r3, [r3, #32]
 8002806:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800280c:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002814:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	6812      	ldr	r2, [r2, #0]
 800281c:	4313      	orrs	r3, r2
 800281e:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	041b      	lsls	r3, r3, #16
 800282c:	4313      	orrs	r3, r2
 800282e:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	041b      	lsls	r3, r3, #16
 800283c:	4313      	orrs	r3, r2
 800283e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4a15      	ldr	r2, [pc, #84]	; (8002898 <OC5Config+0xac>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d00b      	beq.n	8002860 <OC5Config+0x74>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a14      	ldr	r2, [pc, #80]	; (800289c <OC5Config+0xb0>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d007      	beq.n	8002860 <OC5Config+0x74>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4a13      	ldr	r2, [pc, #76]	; (80028a0 <OC5Config+0xb4>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d003      	beq.n	8002860 <OC5Config+0x74>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	4a12      	ldr	r2, [pc, #72]	; (80028a4 <OC5Config+0xb8>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d109      	bne.n	8002874 <OC5Config+0x88>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	021b      	lsls	r3, r3, #8
 800286e:	431a      	orrs	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	68ba      	ldr	r2, [r7, #8]
 8002878:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	4619      	mov	r1, r3
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f7ff fcd7 	bl	8002234 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	40012c00 	.word	0x40012c00
 800289c:	40014000 	.word	0x40014000
 80028a0:	40014400 	.word	0x40014400
 80028a4:	40014800 	.word	0x40014800

080028a8 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a1b      	ldr	r3, [r3, #32]
 80028b6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a1b      	ldr	r3, [r3, #32]
 80028c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c8:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028d4:	683a      	ldr	r2, [r7, #0]
 80028d6:	6812      	ldr	r2, [r2, #0]
 80028d8:	0212      	lsls	r2, r2, #8
 80028da:	4313      	orrs	r3, r2
 80028dc:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	051b      	lsls	r3, r3, #20
 80028ea:	4313      	orrs	r3, r2
 80028ec:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	051b      	lsls	r3, r3, #20
 80028fa:	4313      	orrs	r3, r2
 80028fc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a14      	ldr	r2, [pc, #80]	; (8002954 <OC6Config+0xac>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d00b      	beq.n	800291e <OC6Config+0x76>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a13      	ldr	r2, [pc, #76]	; (8002958 <OC6Config+0xb0>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d007      	beq.n	800291e <OC6Config+0x76>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a12      	ldr	r2, [pc, #72]	; (800295c <OC6Config+0xb4>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d003      	beq.n	800291e <OC6Config+0x76>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a11      	ldr	r2, [pc, #68]	; (8002960 <OC6Config+0xb8>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d109      	bne.n	8002932 <OC6Config+0x8a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	699b      	ldr	r3, [r3, #24]
 800292a:	029b      	lsls	r3, r3, #10
 800292c:	431a      	orrs	r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	68ba      	ldr	r2, [r7, #8]
 8002936:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	4619      	mov	r1, r3
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f7ff fc88 	bl	8002254 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	3710      	adds	r7, #16
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	40012c00 	.word	0x40012c00
 8002958:	40014000 	.word	0x40014000
 800295c:	40014400 	.word	0x40014400
 8002960:	40014800 	.word	0x40014800

08002964 <LL_USART_IsEnabled>:
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0301 	and.w	r3, r3, #1
 8002974:	2b01      	cmp	r3, #1
 8002976:	d101      	bne.n	800297c <LL_USART_IsEnabled+0x18>
 8002978:	2301      	movs	r3, #1
 800297a:	e000      	b.n	800297e <LL_USART_IsEnabled+0x1a>
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr

0800298a <LL_USART_SetStopBitsLength>:
{
 800298a:	b480      	push	{r7}
 800298c:	b083      	sub	sp, #12
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
 8002992:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	431a      	orrs	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	605a      	str	r2, [r3, #4]
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <LL_USART_SetHWFlowCtrl>:
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	431a      	orrs	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	609a      	str	r2, [r3, #8]
}
 80029ca:	bf00      	nop
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr

080029d6 <LL_USART_SetBaudRate>:
{
 80029d6:	b480      	push	{r7}
 80029d8:	b087      	sub	sp, #28
 80029da:	af00      	add	r7, sp, #0
 80029dc:	60f8      	str	r0, [r7, #12]
 80029de:	60b9      	str	r1, [r7, #8]
 80029e0:	607a      	str	r2, [r7, #4]
 80029e2:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029ea:	d11a      	bne.n	8002a22 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	005a      	lsls	r2, r3, #1
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	085b      	lsrs	r3, r3, #1
 80029f4:	441a      	add	r2, r3
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8002a00:	697a      	ldr	r2, [r7, #20]
 8002a02:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8002a06:	4013      	ands	r3, r2
 8002a08:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	085b      	lsrs	r3, r3, #1
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	f003 0307 	and.w	r3, r3, #7
 8002a14:	693a      	ldr	r2, [r7, #16]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	693a      	ldr	r2, [r7, #16]
 8002a1e:	60da      	str	r2, [r3, #12]
}
 8002a20:	e00a      	b.n	8002a38 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	085a      	lsrs	r2, r3, #1
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	441a      	add	r2, r3
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	461a      	mov	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	60da      	str	r2, [r3, #12]
}
 8002a38:	bf00      	nop
 8002a3a:	371c      	adds	r7, #28
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b088      	sub	sp, #32
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002a52:	2300      	movs	r3, #0
 8002a54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f7ff ff84 	bl	8002964 <LL_USART_IsEnabled>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d14e      	bne.n	8002b00 <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	4b29      	ldr	r3, [pc, #164]	; (8002b0c <LL_USART_Init+0xc8>)
 8002a68:	4013      	ands	r3, r2
 8002a6a:	683a      	ldr	r2, [r7, #0]
 8002a6c:	6851      	ldr	r1, [r2, #4]
 8002a6e:	683a      	ldr	r2, [r7, #0]
 8002a70:	68d2      	ldr	r2, [r2, #12]
 8002a72:	4311      	orrs	r1, r2
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	6912      	ldr	r2, [r2, #16]
 8002a78:	4311      	orrs	r1, r2
 8002a7a:	683a      	ldr	r2, [r7, #0]
 8002a7c:	6992      	ldr	r2, [r2, #24]
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	431a      	orrs	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f7ff ff7c 	bl	800298a <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	695b      	ldr	r3, [r3, #20]
 8002a96:	4619      	mov	r1, r3
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f7ff ff89 	bl	80029b0 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a1b      	ldr	r2, [pc, #108]	; (8002b10 <LL_USART_Init+0xcc>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d104      	bne.n	8002ab0 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8002aa6:	2000      	movs	r0, #0
 8002aa8:	f7ff fa7c 	bl	8001fa4 <LL_RCC_GetUSARTClockFreq>
 8002aac:	61b8      	str	r0, [r7, #24]
 8002aae:	e016      	b.n	8002ade <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4a18      	ldr	r2, [pc, #96]	; (8002b14 <LL_USART_Init+0xd0>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d107      	bne.n	8002ac8 <LL_USART_Init+0x84>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002ab8:	f107 0308 	add.w	r3, r7, #8
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff fa4b 	bl	8001f58 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	61bb      	str	r3, [r7, #24]
 8002ac6:	e00a      	b.n	8002ade <LL_USART_Init+0x9a>
#endif
    }
    else if (USARTx == USART3)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a13      	ldr	r2, [pc, #76]	; (8002b18 <LL_USART_Init+0xd4>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d106      	bne.n	8002ade <LL_USART_Init+0x9a>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002ad0:	f107 0308 	add.w	r3, r7, #8
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7ff fa3f 	bl	8001f58 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d00d      	beq.n	8002b00 <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d009      	beq.n	8002b00 <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 8002aec:	2300      	movs	r3, #0
 8002aee:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	699a      	ldr	r2, [r3, #24]
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	69b9      	ldr	r1, [r7, #24]
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f7ff ff6b 	bl	80029d6 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002b00:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3720      	adds	r7, #32
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	efff69f3 	.word	0xefff69f3
 8002b10:	40013800 	.word	0x40013800
 8002b14:	40004400 	.word	0x40004400
 8002b18:	40004800 	.word	0x40004800

08002b1c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b2e:	4a07      	ldr	r2, [pc, #28]	; (8002b4c <LL_InitTick+0x30>)
 8002b30:	3b01      	subs	r3, #1
 8002b32:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002b34:	4b05      	ldr	r3, [pc, #20]	; (8002b4c <LL_InitTick+0x30>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b3a:	4b04      	ldr	r3, [pc, #16]	; (8002b4c <LL_InitTick+0x30>)
 8002b3c:	2205      	movs	r2, #5
 8002b3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002b40:	bf00      	nop
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr
 8002b4c:	e000e010 	.word	0xe000e010

08002b50 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002b58:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f7ff ffdd 	bl	8002b1c <LL_InitTick>
}
 8002b62:	bf00      	nop
 8002b64:	3708      	adds	r7, #8
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
	...

08002b6c <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8002b74:	4b0f      	ldr	r3, [pc, #60]	; (8002bb4 <LL_mDelay+0x48>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8002b7a:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b82:	d00c      	beq.n	8002b9e <LL_mDelay+0x32>
  {
    Delay++;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	3301      	adds	r3, #1
 8002b88:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8002b8a:	e008      	b.n	8002b9e <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8002b8c:	4b09      	ldr	r3, [pc, #36]	; (8002bb4 <LL_mDelay+0x48>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d002      	beq.n	8002b9e <LL_mDelay+0x32>
    {
      Delay--;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	607b      	str	r3, [r7, #4]
  while (Delay)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d1f3      	bne.n	8002b8c <LL_mDelay+0x20>
    }
  }
}
 8002ba4:	bf00      	nop
 8002ba6:	bf00      	nop
 8002ba8:	3714      	adds	r7, #20
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	e000e010 	.word	0xe000e010

08002bb8 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002bc0:	4a04      	ldr	r2, [pc, #16]	; (8002bd4 <LL_SetSystemCoreClock+0x1c>)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6013      	str	r3, [r2, #0]
}
 8002bc6:	bf00      	nop
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	20000000 	.word	0x20000000

08002bd8 <atoi>:
 8002bd8:	220a      	movs	r2, #10
 8002bda:	2100      	movs	r1, #0
 8002bdc:	f000 b8b6 	b.w	8002d4c <strtol>

08002be0 <__errno>:
 8002be0:	4b01      	ldr	r3, [pc, #4]	; (8002be8 <__errno+0x8>)
 8002be2:	6818      	ldr	r0, [r3, #0]
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	20000004 	.word	0x20000004

08002bec <__libc_init_array>:
 8002bec:	b570      	push	{r4, r5, r6, lr}
 8002bee:	4d0d      	ldr	r5, [pc, #52]	; (8002c24 <__libc_init_array+0x38>)
 8002bf0:	4c0d      	ldr	r4, [pc, #52]	; (8002c28 <__libc_init_array+0x3c>)
 8002bf2:	1b64      	subs	r4, r4, r5
 8002bf4:	10a4      	asrs	r4, r4, #2
 8002bf6:	2600      	movs	r6, #0
 8002bf8:	42a6      	cmp	r6, r4
 8002bfa:	d109      	bne.n	8002c10 <__libc_init_array+0x24>
 8002bfc:	4d0b      	ldr	r5, [pc, #44]	; (8002c2c <__libc_init_array+0x40>)
 8002bfe:	4c0c      	ldr	r4, [pc, #48]	; (8002c30 <__libc_init_array+0x44>)
 8002c00:	f000 f8ae 	bl	8002d60 <_init>
 8002c04:	1b64      	subs	r4, r4, r5
 8002c06:	10a4      	asrs	r4, r4, #2
 8002c08:	2600      	movs	r6, #0
 8002c0a:	42a6      	cmp	r6, r4
 8002c0c:	d105      	bne.n	8002c1a <__libc_init_array+0x2e>
 8002c0e:	bd70      	pop	{r4, r5, r6, pc}
 8002c10:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c14:	4798      	blx	r3
 8002c16:	3601      	adds	r6, #1
 8002c18:	e7ee      	b.n	8002bf8 <__libc_init_array+0xc>
 8002c1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c1e:	4798      	blx	r3
 8002c20:	3601      	adds	r6, #1
 8002c22:	e7f2      	b.n	8002c0a <__libc_init_array+0x1e>
 8002c24:	08002ecc 	.word	0x08002ecc
 8002c28:	08002ecc 	.word	0x08002ecc
 8002c2c:	08002ecc 	.word	0x08002ecc
 8002c30:	08002ed0 	.word	0x08002ed0

08002c34 <memset>:
 8002c34:	4402      	add	r2, r0
 8002c36:	4603      	mov	r3, r0
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d100      	bne.n	8002c3e <memset+0xa>
 8002c3c:	4770      	bx	lr
 8002c3e:	f803 1b01 	strb.w	r1, [r3], #1
 8002c42:	e7f9      	b.n	8002c38 <memset+0x4>

08002c44 <_strtol_l.isra.0>:
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c4a:	d001      	beq.n	8002c50 <_strtol_l.isra.0+0xc>
 8002c4c:	2b24      	cmp	r3, #36	; 0x24
 8002c4e:	d906      	bls.n	8002c5e <_strtol_l.isra.0+0x1a>
 8002c50:	f7ff ffc6 	bl	8002be0 <__errno>
 8002c54:	2316      	movs	r3, #22
 8002c56:	6003      	str	r3, [r0, #0]
 8002c58:	2000      	movs	r0, #0
 8002c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c5e:	4f3a      	ldr	r7, [pc, #232]	; (8002d48 <_strtol_l.isra.0+0x104>)
 8002c60:	468e      	mov	lr, r1
 8002c62:	4676      	mov	r6, lr
 8002c64:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8002c68:	5de5      	ldrb	r5, [r4, r7]
 8002c6a:	f015 0508 	ands.w	r5, r5, #8
 8002c6e:	d1f8      	bne.n	8002c62 <_strtol_l.isra.0+0x1e>
 8002c70:	2c2d      	cmp	r4, #45	; 0x2d
 8002c72:	d134      	bne.n	8002cde <_strtol_l.isra.0+0x9a>
 8002c74:	f89e 4000 	ldrb.w	r4, [lr]
 8002c78:	f04f 0801 	mov.w	r8, #1
 8002c7c:	f106 0e02 	add.w	lr, r6, #2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d05c      	beq.n	8002d3e <_strtol_l.isra.0+0xfa>
 8002c84:	2b10      	cmp	r3, #16
 8002c86:	d10c      	bne.n	8002ca2 <_strtol_l.isra.0+0x5e>
 8002c88:	2c30      	cmp	r4, #48	; 0x30
 8002c8a:	d10a      	bne.n	8002ca2 <_strtol_l.isra.0+0x5e>
 8002c8c:	f89e 4000 	ldrb.w	r4, [lr]
 8002c90:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8002c94:	2c58      	cmp	r4, #88	; 0x58
 8002c96:	d14d      	bne.n	8002d34 <_strtol_l.isra.0+0xf0>
 8002c98:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8002c9c:	2310      	movs	r3, #16
 8002c9e:	f10e 0e02 	add.w	lr, lr, #2
 8002ca2:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8002ca6:	f10c 3cff 	add.w	ip, ip, #4294967295
 8002caa:	2600      	movs	r6, #0
 8002cac:	fbbc f9f3 	udiv	r9, ip, r3
 8002cb0:	4635      	mov	r5, r6
 8002cb2:	fb03 ca19 	mls	sl, r3, r9, ip
 8002cb6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8002cba:	2f09      	cmp	r7, #9
 8002cbc:	d818      	bhi.n	8002cf0 <_strtol_l.isra.0+0xac>
 8002cbe:	463c      	mov	r4, r7
 8002cc0:	42a3      	cmp	r3, r4
 8002cc2:	dd24      	ble.n	8002d0e <_strtol_l.isra.0+0xca>
 8002cc4:	2e00      	cmp	r6, #0
 8002cc6:	db1f      	blt.n	8002d08 <_strtol_l.isra.0+0xc4>
 8002cc8:	45a9      	cmp	r9, r5
 8002cca:	d31d      	bcc.n	8002d08 <_strtol_l.isra.0+0xc4>
 8002ccc:	d101      	bne.n	8002cd2 <_strtol_l.isra.0+0x8e>
 8002cce:	45a2      	cmp	sl, r4
 8002cd0:	db1a      	blt.n	8002d08 <_strtol_l.isra.0+0xc4>
 8002cd2:	fb05 4503 	mla	r5, r5, r3, r4
 8002cd6:	2601      	movs	r6, #1
 8002cd8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8002cdc:	e7eb      	b.n	8002cb6 <_strtol_l.isra.0+0x72>
 8002cde:	2c2b      	cmp	r4, #43	; 0x2b
 8002ce0:	bf08      	it	eq
 8002ce2:	f89e 4000 	ldrbeq.w	r4, [lr]
 8002ce6:	46a8      	mov	r8, r5
 8002ce8:	bf08      	it	eq
 8002cea:	f106 0e02 	addeq.w	lr, r6, #2
 8002cee:	e7c7      	b.n	8002c80 <_strtol_l.isra.0+0x3c>
 8002cf0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8002cf4:	2f19      	cmp	r7, #25
 8002cf6:	d801      	bhi.n	8002cfc <_strtol_l.isra.0+0xb8>
 8002cf8:	3c37      	subs	r4, #55	; 0x37
 8002cfa:	e7e1      	b.n	8002cc0 <_strtol_l.isra.0+0x7c>
 8002cfc:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8002d00:	2f19      	cmp	r7, #25
 8002d02:	d804      	bhi.n	8002d0e <_strtol_l.isra.0+0xca>
 8002d04:	3c57      	subs	r4, #87	; 0x57
 8002d06:	e7db      	b.n	8002cc0 <_strtol_l.isra.0+0x7c>
 8002d08:	f04f 36ff 	mov.w	r6, #4294967295
 8002d0c:	e7e4      	b.n	8002cd8 <_strtol_l.isra.0+0x94>
 8002d0e:	2e00      	cmp	r6, #0
 8002d10:	da05      	bge.n	8002d1e <_strtol_l.isra.0+0xda>
 8002d12:	2322      	movs	r3, #34	; 0x22
 8002d14:	6003      	str	r3, [r0, #0]
 8002d16:	4665      	mov	r5, ip
 8002d18:	b942      	cbnz	r2, 8002d2c <_strtol_l.isra.0+0xe8>
 8002d1a:	4628      	mov	r0, r5
 8002d1c:	e79d      	b.n	8002c5a <_strtol_l.isra.0+0x16>
 8002d1e:	f1b8 0f00 	cmp.w	r8, #0
 8002d22:	d000      	beq.n	8002d26 <_strtol_l.isra.0+0xe2>
 8002d24:	426d      	negs	r5, r5
 8002d26:	2a00      	cmp	r2, #0
 8002d28:	d0f7      	beq.n	8002d1a <_strtol_l.isra.0+0xd6>
 8002d2a:	b10e      	cbz	r6, 8002d30 <_strtol_l.isra.0+0xec>
 8002d2c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8002d30:	6011      	str	r1, [r2, #0]
 8002d32:	e7f2      	b.n	8002d1a <_strtol_l.isra.0+0xd6>
 8002d34:	2430      	movs	r4, #48	; 0x30
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1b3      	bne.n	8002ca2 <_strtol_l.isra.0+0x5e>
 8002d3a:	2308      	movs	r3, #8
 8002d3c:	e7b1      	b.n	8002ca2 <_strtol_l.isra.0+0x5e>
 8002d3e:	2c30      	cmp	r4, #48	; 0x30
 8002d40:	d0a4      	beq.n	8002c8c <_strtol_l.isra.0+0x48>
 8002d42:	230a      	movs	r3, #10
 8002d44:	e7ad      	b.n	8002ca2 <_strtol_l.isra.0+0x5e>
 8002d46:	bf00      	nop
 8002d48:	08002dcc 	.word	0x08002dcc

08002d4c <strtol>:
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	460a      	mov	r2, r1
 8002d50:	4601      	mov	r1, r0
 8002d52:	4802      	ldr	r0, [pc, #8]	; (8002d5c <strtol+0x10>)
 8002d54:	6800      	ldr	r0, [r0, #0]
 8002d56:	f7ff bf75 	b.w	8002c44 <_strtol_l.isra.0>
 8002d5a:	bf00      	nop
 8002d5c:	20000004 	.word	0x20000004

08002d60 <_init>:
 8002d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d62:	bf00      	nop
 8002d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d66:	bc08      	pop	{r3}
 8002d68:	469e      	mov	lr, r3
 8002d6a:	4770      	bx	lr

08002d6c <_fini>:
 8002d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d6e:	bf00      	nop
 8002d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d72:	bc08      	pop	{r3}
 8002d74:	469e      	mov	lr, r3
 8002d76:	4770      	bx	lr
